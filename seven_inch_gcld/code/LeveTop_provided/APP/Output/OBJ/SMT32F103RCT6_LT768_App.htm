<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\OBJ\SMT32F103RCT6_LT768_App.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\OBJ\SMT32F103RCT6_LT768_App.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Tue Nov 14 10:42:16 2023
<BR><P>
<H3>Maximum Stack Usage =        132 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Show &rArr; Display_RGB_Gray_RGB565 &rArr; LT768_DrawSquare_Fill &rArr; Square_Start_XY &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1f]">CAN_RX1_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[20]">CAN_SCE_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[15]">DMAChannel1_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[16]">DMAChannel2_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[17]">DMAChannel3_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[18]">DMAChannel4_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[19]">DMAChannel5_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1a]">DMAChannel6_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1b]">DMAChannel7_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from gt911.o(i.EXTI9_5_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN_TX_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN_RX0_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[36]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from stm32f10x.o(.text)
 <LI><a href="#[37]">fputc</a> from usart.o(i.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[35]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[36]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(.text)
</UL>
<P><STRONG><a name="[aa]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[38]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ab]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[ac]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[ad]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[ae]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[af]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[b0]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMAChannel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMAChannel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMAChannel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMAChannel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMAChannel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMAChannel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMAChannel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[39]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[b1]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[b2]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[b3]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>Active_Window_WH</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lt768.o(i.Active_Window_WH))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Active_Window_WH &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>Active_Window_XY</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lt768.o(i.Active_Window_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Active_Window_XY &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>Canvas_Image_Start_address</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lt768.o(i.Canvas_Image_Start_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Canvas_Image_Start_address &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>Canvas_image_width</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Canvas_image_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Canvas_image_width &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[43]"></a>Check_2D_Busy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lt768.o(i.Check_2D_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Check_2D_Busy &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StatusRead
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
</UL>

<P><STRONG><a name="[45]"></a>Check_Busy_Draw</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lt768.o(i.Check_Busy_Draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StatusRead
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Square_Fill
</UL>

<P><STRONG><a name="[46]"></a>Check_Busy_SFI_DMA</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lt768.o(i.Check_Busy_SFI_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Check_Busy_SFI_DMA &rArr; LCD_DataRead &rArr; SPI_DataRead_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
</UL>

<P><STRONG><a name="[49]"></a>Check_SDRAM_Ready</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lt768.o(i.Check_SDRAM_Ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Check_SDRAM_Ready &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StatusRead
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SDRAM_initail
</UL>

<P><STRONG><a name="[4a]"></a>DE_High_Active</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.DE_High_Active))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DE_High_Active &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[4c]"></a>Display_ON</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Display_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Display_ON &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>Display_RGB_Gray_RGB565</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, lt768_demo.o(i.Display_RGB_Gray_RGB565))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Display_RGB_Gray_RGB565 &rArr; LT768_DrawSquare_Fill &rArr; Square_Start_XY &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show
</UL>

<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gt911.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[4f]"></a>EXTI_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[51]"></a>Enable_SFlash_SPI</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Enable_SFlash_SPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Enable_SFlash_SPI &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
</UL>

<P><STRONG><a name="[52]"></a>Foreground_color_65k</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lt768.o(i.Foreground_color_65k))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Foreground_color_65k &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
</UL>

<P><STRONG><a name="[71]"></a>GPIO_Init</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_io_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_HW_Reset
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init_8
</UL>

<P><STRONG><a name="[72]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_HW_Reset
</UL>

<P><STRONG><a name="[74]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_io_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_HW_Reset
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init_8
</UL>

<P><STRONG><a name="[53]"></a>Goto_Pixel_XY</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lt768.o(i.Goto_Pixel_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Goto_Pixel_XY &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
</UL>

<P><STRONG><a name="[54]"></a>Graphic_Mode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Graphic_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Graphic_Mode &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[55]"></a>HSYNC_Low_Active</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.HSYNC_Low_Active))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HSYNC_Low_Active &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[56]"></a>Host_Bus_16bit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Host_Bus_16bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Host_Bus_16bit &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[47]"></a>LCD_CmdWrite</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, if_port.o(i.LCD_CmdWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_CmdWrite &rArr; SPI_CmdWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CmdWrite_8
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ON
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Check_Temp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PLL_Initial
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_Low_Active
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSCAN_T_to_B
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_16bit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_PWM1
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Square_Fill
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_SFI_DMA
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_PWM1
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Square_Start_XY
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Square_End_XY
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Timer1_Count_Buffer
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Timer1_Compare_Buffer
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_PWM_Prescaler_1_to_256
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_A_In_Out
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_DMA_Mode
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_1
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_0
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_8
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_4
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_2
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_1
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Clock_Period
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Transfer_Width_Height
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Source_Width
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Source_Start_Address
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Destination_Upper_Left_Corner
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_16b_16bpp
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDATA_Set_RGB
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCLK_Falling
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_XY_Mode
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Select_SDRAM
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_16bpp_Mode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemWrite_Left_Right_Top_Down
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Vertical_Non_Display
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VSYNC_Start_Position
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VSYNC_Pulse_Width
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Horizontal_Non_Display
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HorizontalWidth_VerticalHeight
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HSYNC_Start_Position
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HSYNC_Pulse_Width
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Bus_16bit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSYNC_Low_Active
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic_Mode
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SFlash_SPI
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_High_Active
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_SFI_DMA
</UL>

<P><STRONG><a name="[48]"></a>LCD_DataRead</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, if_port.o(i.LCD_DataRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_DataRead &rArr; SPI_DataRead_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataRead_8
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ON
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Check_Temp
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_Low_Active
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSCAN_T_to_B
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_16bit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_PWM1
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_SFI_DMA
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_PWM1
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_DMA_Mode
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_1
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_0
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_8
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_4
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_2
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_1
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_16b_16bpp
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDATA_Set_RGB
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCLK_Falling
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_XY_Mode
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Select_SDRAM
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_16bpp_Mode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemWrite_Left_Right_Top_Down
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Bus_16bit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSYNC_Low_Active
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic_Mode
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SFlash_SPI
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_High_Active
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_SFI_DMA
</UL>

<P><STRONG><a name="[4b]"></a>LCD_DataWrite</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, if_port.o(i.LCD_DataWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataWrite_8
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ON
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Check_Temp
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PLL_Initial
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_Low_Active
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSCAN_T_to_B
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_16bit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_PWM1
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Square_Fill
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_SFI_DMA
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_PWM1
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Square_Start_XY
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Square_End_XY
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Timer1_Count_Buffer
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Timer1_Compare_Buffer
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_PWM_Prescaler_1_to_256
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_A_In_Out
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_DMA_Mode
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_1
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_0
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_8
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_4
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_2
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_1
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Clock_Period
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Transfer_Width_Height
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Source_Width
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Source_Start_Address
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Destination_Upper_Left_Corner
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_16b_16bpp
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDATA_Set_RGB
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCLK_Falling
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_XY_Mode
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Select_SDRAM
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_16bpp_Mode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemWrite_Left_Right_Top_Down
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Vertical_Non_Display
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VSYNC_Start_Position
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VSYNC_Pulse_Width
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Horizontal_Non_Display
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HorizontalWidth_VerticalHeight
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HSYNC_Start_Position
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HSYNC_Pulse_Width
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Bus_16bit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSYNC_Low_Active
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic_Mode
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SFlash_SPI
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_High_Active
</UL>

<P><STRONG><a name="[5a]"></a>LCD_HSYNC_Pulse_Width</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lt768.o(i.LCD_HSYNC_Pulse_Width))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_HSYNC_Pulse_Width &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[5b]"></a>LCD_HSYNC_Start_Position</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lt768.o(i.LCD_HSYNC_Start_Position))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_HSYNC_Start_Position &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[5c]"></a>LCD_HorizontalWidth_VerticalHeight</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lt768.o(i.LCD_HorizontalWidth_VerticalHeight))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LCD_HorizontalWidth_VerticalHeight &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[5d]"></a>LCD_Horizontal_Non_Display</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lt768.o(i.LCD_Horizontal_Non_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_Horizontal_Non_Display &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[3f]"></a>LCD_RegisterWrite</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lt768.o(i.LCD_RegisterWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Window_Start_XY
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Width
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Start_Address
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_XY
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_WH
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SDRAM_initail
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goto_Pixel_XY
</UL>

<P><STRONG><a name="[44]"></a>LCD_StatusRead</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, if_port.o(i.LCD_StatusRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_StatusRead &rArr; SPI_StatusRead_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StatusRead_8
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Check_Temp
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SDRAM_Ready
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Draw
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>

<P><STRONG><a name="[5f]"></a>LCD_VSYNC_Pulse_Width</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lt768.o(i.LCD_VSYNC_Pulse_Width))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_VSYNC_Pulse_Width &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[60]"></a>LCD_VSYNC_Start_Position</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lt768.o(i.LCD_VSYNC_Start_Position))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_VSYNC_Start_Position &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[61]"></a>LCD_Vertical_Non_Display</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lt768.o(i.LCD_Vertical_Non_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_Vertical_Non_Display &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[62]"></a>LT768_DMA_24bit_Block</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, lt768_lib.o(i.LT768_DMA_24bit_Block))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LT768_DMA_24bit_Block &rArr; Goto_Pixel_XY &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_SFI_DMA
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_DMA_Mode
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_1
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_0
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Clock_Period
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Transfer_Width_Height
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Source_Width
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Source_Start_Address
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Destination_Upper_Left_Corner
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goto_Pixel_XY
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SFlash_SPI
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_SFI_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show
</UL>

<P><STRONG><a name="[4e]"></a>LT768_DrawSquare_Fill</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lt768_lib.o(i.LT768_DrawSquare_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LT768_DrawSquare_Fill &rArr; Square_Start_XY &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Square_Fill
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Square_Start_XY
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Square_End_XY
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGB_Gray_RGB565
</UL>

<P><STRONG><a name="[6f]"></a>LT768_HW_Reset</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lt768_lib.o(i.LT768_HW_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LT768_HW_Reset &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Check_Temp
</UL>

<P><STRONG><a name="[75]"></a>LT768_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lt768_lib.o(i.LT768_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LT768_Init &rArr; LT768_initial &rArr; Set_LCD_Panel &rArr; LCD_HorizontalWidth_VerticalHeight &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Check_Temp
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_initial
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_HW_Reset
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StatusRead
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>LT768_PLL_Initial</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, lt768_lib.o(i.LT768_PLL_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LT768_PLL_Initial &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_initial
</UL>

<P><STRONG><a name="[7a]"></a>LT768_PWM1_Init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lt768_lib.o(i.LT768_PWM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LT768_PWM1_Init &rArr; Stop_PWM1 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_PWM1
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_PWM1
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Timer1_Count_Buffer
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Timer1_Compare_Buffer
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_PWM_Prescaler_1_to_256
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_8
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_4
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_2
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_1
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>LT768_SDRAM_initail</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lt768_lib.o(i.LT768_SDRAM_initail))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LT768_SDRAM_initail &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SDRAM_Ready
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_initial
</UL>

<P><STRONG><a name="[77]"></a>LT768_initial</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lt768_lib.o(i.LT768_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LT768_initial &rArr; Set_LCD_Panel &rArr; LCD_HorizontalWidth_VerticalHeight &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SDRAM_initail
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PLL_Initial
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Init
</UL>

<P><STRONG><a name="[87]"></a>LT_TpInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtp.o(i.LT_TpInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LT_TpInit &rArr; TP_io_init &rArr; Set_GPIO_A_In_Out &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>Main_Image_Start_Address</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lt768.o(i.Main_Image_Start_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Main_Image_Start_Address &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>Main_Image_Width</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Main_Image_Width))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Main_Image_Width &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>Main_Window_Start_XY</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lt768.o(i.Main_Window_Start_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Main_Window_Start_XY &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>MemWrite_Left_Right_Top_Down</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.MemWrite_Left_Right_Top_Down))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MemWrite_Left_Right_Top_Down &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[8d]"></a>Memory_16bpp_Mode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lt768.o(i.Memory_16bpp_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Memory_16bpp_Mode &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[8e]"></a>Memory_Select_SDRAM</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Memory_Select_SDRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Memory_Select_SDRAM &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[8f]"></a>Memory_XY_Mode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Memory_XY_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Memory_XY_Mode &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[90]"></a>PCLK_Falling</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.PCLK_Falling))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PCLK_Falling &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[91]"></a>PDATA_Set_RGB</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.PDATA_Set_RGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PDATA_Set_RGB &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[92]"></a>Parallel_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, if_port.o(i.Parallel_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Parallel_Init &rArr; SPI2_Init_8 &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init_8
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init_8
</UL>

<P><STRONG><a name="[70]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_io_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_HW_Reset
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init_8
</UL>

<P><STRONG><a name="[a2]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[94]"></a>RGB_16b_16bpp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lt768.o(i.RGB_16b_16bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RGB_16b_16bpp &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[67]"></a>SFI_DMA_Destination_Upper_Left_Corner</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lt768.o(i.SFI_DMA_Destination_Upper_Left_Corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SFI_DMA_Destination_Upper_Left_Corner &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
</UL>

<P><STRONG><a name="[6a]"></a>SFI_DMA_Source_Start_Address</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lt768.o(i.SFI_DMA_Source_Start_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SFI_DMA_Source_Start_Address &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
</UL>

<P><STRONG><a name="[69]"></a>SFI_DMA_Source_Width</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lt768.o(i.SFI_DMA_Source_Width))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SFI_DMA_Source_Width &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
</UL>

<P><STRONG><a name="[68]"></a>SFI_DMA_Transfer_Width_Height</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lt768.o(i.SFI_DMA_Transfer_Width_Height))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SFI_DMA_Transfer_Width_Height &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
</UL>

<P><STRONG><a name="[93]"></a>SPI2_Init_8</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, if_port.o(i.SPI2_Init_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SPI2_Init_8 &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parallel_Init
</UL>

<P><STRONG><a name="[98]"></a>SPI2_ReadWriteByte</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, if_port.o(i.SPI2_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StatusRead_8
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataWrite_8
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataRead_8
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CmdWrite_8
</UL>

<P><STRONG><a name="[66]"></a>SPI_Clock_Period</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lt768.o(i.SPI_Clock_Period))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SPI_Clock_Period &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
</UL>

<P><STRONG><a name="[97]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init_8
</UL>

<P><STRONG><a name="[57]"></a>SPI_CmdWrite_8</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, if_port.o(i.SPI_CmdWrite_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_CmdWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>

<P><STRONG><a name="[58]"></a>SPI_DataRead_8</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, if_port.o(i.SPI_DataRead_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DataRead_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
</UL>

<P><STRONG><a name="[59]"></a>SPI_DataWrite_8</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, if_port.o(i.SPI_DataWrite_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
</UL>

<P><STRONG><a name="[96]"></a>SPI_Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init_8
</UL>

<P><STRONG><a name="[5e]"></a>SPI_StatusRead_8</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, if_port.o(i.SPI_StatusRead_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_StatusRead_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StatusRead
</UL>

<P><STRONG><a name="[99]"></a>Select_Main_Window_16bpp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lt768.o(i.Select_Main_Window_16bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Select_Main_Window_16bpp &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[7b]"></a>Select_PWM1</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lt768.o(i.Select_PWM1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Select_PWM1 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[7d]"></a>Select_PWM1_Clock_Divided_By_1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Select_PWM1_Clock_Divided_By_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Select_PWM1_Clock_Divided_By_1 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[7e]"></a>Select_PWM1_Clock_Divided_By_2</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lt768.o(i.Select_PWM1_Clock_Divided_By_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Select_PWM1_Clock_Divided_By_2 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[7f]"></a>Select_PWM1_Clock_Divided_By_4</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lt768.o(i.Select_PWM1_Clock_Divided_By_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Select_PWM1_Clock_Divided_By_4 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[80]"></a>Select_PWM1_Clock_Divided_By_8</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Select_PWM1_Clock_Divided_By_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Select_PWM1_Clock_Divided_By_8 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[63]"></a>Select_SFI_0</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Select_SFI_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Select_SFI_0 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
</UL>

<P><STRONG><a name="[64]"></a>Select_SFI_1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Select_SFI_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Select_SFI_1 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
</UL>

<P><STRONG><a name="[65]"></a>Select_SFI_DMA_Mode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Select_SFI_DMA_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Select_SFI_DMA_Mode &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
</UL>

<P><STRONG><a name="[9a]"></a>Set_GPIO_A_In_Out</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lt768.o(i.Set_GPIO_A_In_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Set_GPIO_A_In_Out &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_io_init
</UL>

<P><STRONG><a name="[86]"></a>Set_LCD_Panel</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, lt768_lib.o(i.Set_LCD_Panel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Set_LCD_Panel &rArr; LCD_HorizontalWidth_VerticalHeight &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_Low_Active
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSCAN_T_to_B
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_16bit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_16b_16bpp
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDATA_Set_RGB
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCLK_Falling
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_XY_Mode
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Select_SDRAM
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_16bpp_Mode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemWrite_Left_Right_Top_Down
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Vertical_Non_Display
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VSYNC_Start_Position
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VSYNC_Pulse_Width
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Horizontal_Non_Display
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HorizontalWidth_VerticalHeight
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HSYNC_Start_Position
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HSYNC_Pulse_Width
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Bus_16bit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSYNC_Low_Active
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic_Mode
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_High_Active
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_initial
</UL>

<P><STRONG><a name="[7c]"></a>Set_PWM_Prescaler_1_to_256</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lt768.o(i.Set_PWM_Prescaler_1_to_256))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Set_PWM_Prescaler_1_to_256 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[82]"></a>Set_Timer1_Compare_Buffer</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lt768.o(i.Set_Timer1_Compare_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Set_Timer1_Compare_Buffer &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[81]"></a>Set_Timer1_Count_Buffer</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lt768.o(i.Set_Timer1_Count_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Set_Timer1_Count_Buffer &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[9e]"></a>Show</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, lt768_demo.o(i.Show))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = Show &rArr; Display_RGB_Gray_RGB565 &rArr; LT768_DrawSquare_Fill &rArr; Square_Start_XY &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_RGB_Gray_RGB565
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>Square_End_XY</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lt768.o(i.Square_End_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Square_End_XY &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
</UL>

<P><STRONG><a name="[6c]"></a>Square_Start_XY</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lt768.o(i.Square_Start_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Square_Start_XY &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
</UL>

<P><STRONG><a name="[84]"></a>Start_PWM1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Start_PWM1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Start_PWM1 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[6b]"></a>Start_SFI_DMA</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Start_SFI_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Start_SFI_DMA &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
</UL>

<P><STRONG><a name="[6e]"></a>Start_Square_Fill</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lt768.o(i.Start_Square_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Start_Square_Fill &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Draw
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
</UL>

<P><STRONG><a name="[83]"></a>Stop_PWM1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Stop_PWM1))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Stop_PWM1 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[a6]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[9f]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>System_Check_Temp</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lt768_lib.o(i.System_Check_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = System_Check_Temp &rArr; LT768_HW_Reset &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_HW_Reset
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StatusRead
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Init
</UL>

<P><STRONG><a name="[9d]"></a>TFT_16bit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lt768.o(i.TFT_16bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TFT_16bit &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[88]"></a>TP_io_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rpio.o(i.TP_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TP_io_init &rArr; Set_GPIO_A_In_Out &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_A_In_Out
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT_TpInit
</UL>

<P><STRONG><a name="[a9]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[a1]"></a>USART_Init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[9c]"></a>VSCAN_T_to_B</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.VSCAN_T_to_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = VSCAN_T_to_B &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[9b]"></a>VSYNC_Low_Active</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.VSYNC_Low_Active))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = VSYNC_Low_Active &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[a3]"></a>__0printf$5</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b4]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[a8]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[b6]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[b7]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[a5]"></a>delay_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>delay_ms</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT_TpInit
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Check_Temp
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SDRAM_initail
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PLL_Initial
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_HW_Reset
</UL>

<P><STRONG><a name="[79]"></a>delay_us</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PLL_Initial
</UL>

<P><STRONG><a name="[37]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = main &rArr; Show &rArr; Display_RGB_Gray_RGB565 &rArr; LT768_DrawSquare_Fill &rArr; Square_Start_XY &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8 &rArr; SPI2_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parallel_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Window_Start_XY
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Width
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Start_Address
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT_TpInit
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ON
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_XY
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_WH
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[a7]"></a>uart_init</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, usart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a0]"></a>SetSysClockTo72</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a4]"></a>_printf_core</STRONG> (Thumb, 660 bytes, Stack size 104 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
