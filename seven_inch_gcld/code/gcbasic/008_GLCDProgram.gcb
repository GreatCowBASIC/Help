// Prototype GLCD library
#chip 18F27Q84, 64
#option Explicit

// Development configuration options
    // #define RESETCHECKONLY                  // only exec a RESET check, requires HW USART
    #define RESETMAXATTEMPTS  5             // number of resets before giving up
    #define CHECKATTEMPTS  10               // number of checks to make before giving up
    // #define SERIALDEBUG                     // serial debug, requires HW USART
    // #define SCRIPTDEBUG                     // script debug

#include <glcd.h>
    #define GLCD_TYPE LT7686_800_600_BLUE
    #define LT7686_800_600_BLUE          99             // to be moved to GLCD.h


// Hardware setup

    // Setup USART used fro debugging
    #define USART_BAUD_RATE 9600
    #define USART_TX_BLOCKING
    #define USART_DELAY OFF



    // PIC PPS Tool version: 0.0.6.5
    
    #startup InitPPS, 85
    #define PPSToolPart 18F27Q84

Sub InitPPS
            
            // Module: UART pin directions
            Dir PORTC.6 Out    ' Make TX1 pin an output
            // Module: UART1
            RC6PPS = 0x0020    // TX1 > RC6
        
        End Sub
    // Add this code segment to your GCBASIC source program


    /*
    // Setup SPI
        #ifdef HARDWARESPI
            // This is conditional to support Hardware SPI
            SSP1CLKPPS = 0x13   //RC3->MSSP1:SCK1    
            RC3PPS = 0x19   //RC3->MSSP1:SCK1    
            RC5PPS = 0x1A   //RC5->MSSP1:SDO1    
            SSP1DATPPS = 0x14   //RC4->MSSP1:SDI1  
        #endif

        // #define HARDWARESPI
        #define HWSPIMODE MASTERFAST
    */

// SPI clock options
    #define SPI_CPOL_0 0
    #define SPI_CPOL_1 2
    #define SPI_CPHA_0 0
    #define SPI_CPHA_1 1

// Pin mappings for  SPI
    // #define LT7686_DO          portc.4  // portb.0
    // #define LT7686_DI          portc.4  // portc.4
    #define LT7686_DO          portb.0
    #define LT7686_DI          portc.4
    #define LT7686_SCK         portc.3
    #define LT7686_CS          porta.3
    #define LT7686_RST         portb.5

    #script
        LT7686_SPICLOCKMODE = INT( SPI_CPOL_1+SPI_CPHA_1 )
        if LT7686_SPICLOCKMODE = 0 Then
            STATE1 = ON
            STATE2 = OFF
        end if
        if LT7686_SPICLOCKMODE = 3 Then
            STATE1 = OFF
            STATE2 = ON
        end if        
    #endscript

    // end of hardware setup


// Main program 


        #include "gcbversionnumber.cnt"
            'Include the GCBVersionNumber.cnt to increment versionString and create the build time string called GCBBuildTimeStr.
            ' versionString a string is created automatically.
            ' GCBBuildTimeStr is a string that is also created automatically.
            ' use "GCBVersionNumber.cnt" as this will create a local copy of the versionString tracker.
            ' if you use <GCBVersionNumber.cnt> this is a system wide versionString tracker.


            dim versionString as string * 40
            versionString = "Build "+GCBBuildStr
            versionString = versionString + " @ "+GCBBuildTimeStr

            HSerPrintCRLF
            HSerPrintStringCRLF "LT7686 Library Development " + versionString
        #ifndef RESETCHECKONLY
            // This will initialise and clear the screen
                HSerPrint "Proceeding with InitGLCD()": HSerPrintCRLF            
            InitGLCD
                HSerPrint "Proceeding with GLCDCLS()": HSerPrintCRLF

                #ifdef SERIALDEBUG
                HserPrint "LT7686_REG_STSR status register 0b" + bytetobin(LT7686_StatusReadResult): HSerPrintCRLF
                HserPrint "    see datasheet 19.1": HSerPrintCRLF
    
                // Dump registers to show end state of registers
                HserPrintCRLF
                dim xloop as Byte
                for xloop = 1 to 0xff

                    LT7686_WriteCMD( xloop )
                    hserprint hex(xloop)
                    hserprint ":"
                    HserPrint hex(LT7686_DataRead)
                    LT7686_Check_Busy_Draw
                    HserPrintCRLF
                next
                #endif
            HSerPrintStringCRLF "Completed operations"
        #else
            #ifndef USART_BAUD_RATE
                //! You need to have hardware serial setup to see the results!!
                //! See up hardware serial, or, change to some other debug method.
            #endif
            // Call and show the result
            HSerPrint "Proceeding with GLCD Check_Init()"
            HSerPrintCRLF
            if  LT7686_Check_Init = True Then
                HSerPrint "GLCD Operating and responding"
            else
                HSerPrint "GLCD failed to respond"
            end if
            HSerPrintCRLF

        #endif

        GLCDCLS 

        Dim style, colors, drawcount, xx,yy,xl,yl, rr as Word
        drawcount = 0

        style = 0
        Do
            // generate random positions
                xx = Scale( Random, 0, 255, 0, GLCDDeviceWidth - 1 )
                xl = Scale( Random, 0, 255, 0, GLCDDeviceWidth - 1 - xx )
                xl = xx + xl
                yy = Scale( Random, 0, 255, 0, GLCDDeviceHeight - 1 )
                yl = Scale( Random, 0, 255, 0, GLCDDeviceHeight - 1 - yy )
                yl = yy + yl

                rr = Scale( Random, 0, 255, 0, 20 )
            
            colors = Scale( Random, 0, 255, 0, 0xFFFF )

            Select Case Style
                case 0: Circle ( xx, yy, rr, colors )
                case 1: FilledCircle ( xx, yy, rr, colors )
                case 2: Line (  xx, yy, xl, yl, colors )
                case 3: Box (  xx, yy, xl, yl, colors )
                case 4: FilledBox (  xx, yy, xl, yl, colors )

                End Select

            If drawcount = 1024 Then 
                GLCDCLS
                drawcount = 0
                Randomize TIMER0 
                Style++
                If Style = 5 then Style = 0
                End If    
            drawcount++
        Loop
    End



Sub InitGLCD_LT7686

        #if GLCD_TYPE = LT7686_800_600_BLUE

            Dim LT7686status as Bit 

            
            Dir LT7686_DI   In
            Dir LT7686_DO   Out
            Dir LT7686_SCK  Out
            Dir LT7686_CS   Out
            Dir LT7686_RST  Out

            // Physical reset with no GLCD comms
            Dir LT7686_RST Out
            LT7686_RST = 1
            Wait 10 ms
            LT7686_RST = 0
            Wait 10 ms
            LT7686_RST = 1
            Wait 10 ms

            // Force SPI to known state for SPI MODE 

            #if LT7686_SPICLOCKMODE  0 Then
                LT7686_SCK = 1
                #define STATE1 ON
                #define STATE2 OFF
            #else 
                LT7686_SCK = 1
                #define STATE1 OFF
                #define STATE2 ON
            #endif
                LT7686_DO  = 0
                LT7686_DI  = 1
                LT7686_CS  = 1
                LT7686_RST = 1                

            LT7686_initdata = LT7686_Check_Init

            Dim GLCDbackground, GLCDForeground as Long

            // Reuse variables to reduce RAM
            Dim LT7686_pointer as Long alias GLCDbackground_E, GLCDbackground_U, GLCDbackground_H, GLCDbackground
            Dim tableloop  as Word alias GLCDForeground_E, GLCDForeground_U
            Dim LT7686_initlength as Word alias GLCDForeground_H, GLCDForeground
            Dim LT7686_initdata as Byte alias GLCDDeviceHeight
            Dim oldLT7686_initdata as Byte alias GLCDDeviceHeight_H
            Dim lastLT7686_cmd as Byte alias GLCDDeviceWidth_H

            // Get init dataset, readtable to init LC
            oldLT7686_initdata = 0
            LT7686_pointer = [Long]0
            readtable LT7686_InitTFT_Dataset, LT7686_pointer, LT7686_initlength
            LT7686_pointer++

            Do Forever
                readtable LT7686_InitTFT_Dataset, LT7686_pointer, LT7686_initdata
                LT7686_pointer++

                Select Case LT7686_initdata

                    Case 0x11
                        readtable LT7686_InitTFT_Dataset, LT7686_pointer, LT7686_initdata
                        oldLT7686_initdata = LT7686_initdata
                        LT7686_pointer++
                            #ifdef SERIALDEBUG
                                HSerPrint hex(LT7686_initdata)
                                HSerPrint " "     
                            #endif               
                        LT7686_WriteCMD( LT7686_initdata)
                        lastLT7686_cmd = LT7686_initdata
                    Case 0x12
                            /*
                            Example:
                                The command, 0x12, is to read back the content of register [01], and if the result is not [0x82], 
                                then it will keep reading the register until it reads [0x82].
                                This code is to check if PLL is ready or not. 

                            0x11, 0x01, 0x13, 0x82 // REG_WR('h01, 'h82)
                            0x11, 0x01, 0x12, 0x82 // REG_WR('h01, 'h82) //Error  
                            */
                        readtable LT7686_InitTFT_Dataset, LT7686_pointer, LT7686_initdata                 
                        LT7686_pointer++
                            #ifdef SERIALDEBUG
                                HSerPrint hex(LT7686_initdata)
                                HSerPrint " "     
                            #endif               
                        //! Danger.. this could be deadlock function!! if the GLCD does not reply... then, this is a lockup
                        //! To be safe we should use a Watchdog
                        //! add Watchdog when operational
                        // Read register and get the result
                        
                        Do while LT7686_DataRead <> LT7686_initdata
                            wait 100 us
                            // re-request the same register
                            LT7686_WriteCMD( lastLT7686_cmd)
                        Loop
                        
                    Case 0x13
                        readtable LT7686_InitTFT_Dataset, LT7686_pointer, LT7686_initdata
                        oldLT7686_initdata = LT7686_initdata
                        LT7686_pointer++
                            #ifdef SERIALDEBUG
                                HSerPrint hex(LT7686_initdata)
                                HSerPrint " "     
                            #endif   
                        LT7686_WriteData( LT7686_initdata)
                    Case 0xAA
                        readtable LT7686_InitTFT_Dataset, LT7686_pointer, LT7686_initdata
                        LT7686_pointer++ 

                        // If oldLT7686_initdata <>  LT7686_initdata Then   
                            // Only do this once
                            wait 100 us
                            LT7686_Check_Busy_Draw
                            oldLT7686_initdata = LT7686_initdata
                        // End if
                End Select
                If LT7686_pointer > LT7686_initlength then Exit Do
            Loop
                #ifdef SERIALDEBUG
                    HserPrintCRLF
                    HSerPrint "READ/SPI " + hex(LT7686_pointer)
                    HSerPrint " "
                    HserPrintCRLF    
                #endif

            Do While LT7686_Check_Init = False
                //~ This could be a dead lock as the GLCD needs to respond
            Loop

            'Default Colours
            GLCDForeground = TFT_WHITE
            'Default Colours
            #ifdef DEFAULT_GLCDBACKGROUND
            GLCDbackground = DEFAULT_GLCDBACKGROUND
            #endif

            #ifndef DEFAULT_GLCDBACKGROUND
            GLCDbackground = TFT_BLACK
            #endif

            'Variables required for device
            GLCDDeviceWidth = GLCD_WIDTH
            GLCDDeviceHeight = GLCD_HEIGHT
            GLCDFontWidth = 6
            GLCDfntDefault = 0
            GLCDfntDefaultsize = 2
            GLCDfntDefaultHeight = 7  'used by GLCDPrintString and GLCDPrintStringLn
            GLCDRotate Portrait

            GLCDCLS

        #endif
            
    end sub

Sub GLCDCLS_LT7686( Optional In  GLCDbackground as Long = GLCDbackground )

        Dim Linecolour as Word

        ' initialise global variable. Required variable for Circle in all DEVICE DRIVERS- DO NOT DELETE
        GLCD_yordinate = 0


        LT7686_WriteCMD(0x68)
        LT7686_WriteData(0x00)

        LT7686_WriteCMD(0x69)
        LT7686_WriteData(0x00)

        LT7686_WriteCMD(0x6A)
        LT7686_WriteData(0x00)

        LT7686_WriteCMD(0x6B)
        LT7686_WriteData(0x00)

        LT7686_WriteCMD(0x6C)
        LT7686_WriteData(GLCDDeviceWidth)

        LT7686_WriteCMD(0x6D)
        LT7686_WriteData(GLCDDeviceWidth_H)

        LT7686_WriteCMD(0x6E)
        LT7686_WriteData(GLCDDeviceHeight)

        LT7686_WriteCMD(0x6F)
        LT7686_WriteData(GLCDDeviceHeight_H)

        Linecolour = GLCDbackground 
        LT7686_SendColor 

        LT7686_WriteCMD( LT7686_REG_DCR1 )
        LT7686_WriteData(0xE0) 
        LT7686_Check_Busy_Draw

    end sub

Sub Filledbox_LT7686(In LineX1 as word, In LineY1 as word, In LineX2 as word, In LineY2 as word, Optional In LineColour As Word = GLCDForeground)
    
    CreateBox
    LT7686_SendColor
    LT7686_WriteCMD( LT7686_REG_DCR1 )
    LT7686_WriteData(0xE0) 
    LT7686_Check_Busy_Draw

    End Sub
Sub Box_LT7686(In LineX1 as word, In LineY1 as word, In LineX2 as word, In LineY2 as word, Optional In LineColour As Word = GLCDForeground)

    CreateBox
    LT7686_SendColor
    LT7686_WriteCMD( LT7686_REG_DCR1 )
    LT7686_WriteData(0xA0) 
    LT7686_Check_Busy_Draw

    End Sub

    // Mandates LineX1 as word, In LineY1 as word, In LineX2 as word, In LineY2 as word
Macro CreateBox

    LT7686_WriteCMD(0x68)
    LT7686_WriteData(LineX1)

    LT7686_WriteCMD(0x69)
    LT7686_WriteData(LineX1_H)

    LT7686_WriteCMD(0x6A)
    LT7686_WriteData(LineY1)

    LT7686_WriteCMD(0x6B)
    LT7686_WriteData(LineY1_H)

    LT7686_WriteCMD(0x6C)
    LT7686_WriteData(LineX2)

    LT7686_WriteCMD(0x6D)
    LT7686_WriteData(LineX2_H)

    LT7686_WriteCMD(0x6E)
    LT7686_WriteData(LineY2)

    LT7686_WriteCMD(0x6F)
    LT7686_WriteData(LineY2_H)

    End Macro

Sub LINE_LT7686(In LineX1 as word, In LineY1 as word, In LineX2 as word, In LineY2 as word, Optional In LineColour as word = GLCDForeground)
	
	LT7686_WriteCMD(0x68)
	LT7686_WriteData(LineX1)

	LT7686_WriteCMD(0x69)
	LT7686_WriteData(LineX1_H)

	LT7686_WriteCMD(0x6A)
	LT7686_WriteData(LineY1)

	LT7686_WriteCMD(0x6B)
	LT7686_WriteData(LineY1_H)

	LT7686_WriteCMD(0x6C)
	LT7686_WriteData(LineX2)

	LT7686_WriteCMD(0x6D)
	LT7686_WriteData(LineX2_H)

	LT7686_WriteCMD(0x6E)
	LT7686_WriteData(LineY2)

	LT7686_WriteCMD(0x6F)
	LT7686_WriteData(LineY2_H)

    LT7686_SendColor

	LT7686_WriteCMD(0x67)
	LT7686_WriteData(0x80)
    
	LT7686_Check_Busy_Draw

    End Sub

sub FilledCircle_LT7686 ( in xoffset as word, in yoffset as word, in Inxradius as integer, Optional In LineColour as word = GLCDForeground , Optional In yordinate = GLCD_yordinate)

    CreateCircle
    LT7686_SendColor
	LT7686_WriteCMD(0x76);
	LT7686_WriteData(0xC0);//B1100_XXXX
	LT7686_Check_Busy_Draw	

    end sub

Sub Circle_LT7686 ( in xoffset as word, in yoffset as word, in Inxradius as integer, Optional In LineColour as word = GLCDForeground , Optional In yordinate = GLCD_yordinate)

    CreateCircle
    LT7686_SendColor
	LT7686_WriteCMD(0x76);
	LT7686_WriteData(0x80);//B1000_XXXX
	LT7686_Check_Busy_Draw	

    end sub

 // Mandated xoffset as word, in yoffset as word, in Inxradius as integer
Macro CreateCircle
	
    LT7686_WriteCMD(0x7B);
	LT7686_WriteData(xoffset);

	LT7686_WriteCMD(0x7C);
	LT7686_WriteData(xoffset_H);

	LT7686_WriteCMD(0x7D);
	LT7686_WriteData(yoffset);

	LT7686_WriteCMD(0x7E);
	LT7686_WriteData(yoffset_H);

	LT7686_WriteCMD(0x77);
	LT7686_WriteData(Inxradius);

	LT7686_WriteCMD(0x78);
	LT7686_WriteData(Inxradius_H);

	LT7686_WriteCMD(0x79);
	LT7686_WriteData(Inxradius);

	LT7686_WriteCMD(0x7A);
	LT7686_WriteData(Inxradius_H);

    End Macro

Macro LT7686_SendColor

        // red component
        LT7686_WriteCMD(LT7686_REG_FGCR)
        LT7686_WriteData( FnLSR ( LineColour, 11 ) )
    
        // green component
        LT7686_WriteCMD(LT7686_REG_FGCG)
        LT7686_WriteData( FnLSR ( LineColour, 5 ) & 0x3F )
    
        // blue component
        LT7686_WriteCMD(LT7686_REG_FGCB)
        LT7686_WriteData( LineColour & 0x1F )

    End Macro

Sub GLCDRotate_LT7686
    end sub
Sub LT7686_Hardware_Reset()

        #option Volatile LT7686_RST
        Dir LT7686_RST Out
        LT7686_RST = 1
        Wait 10 ms
        LT7686_RST = 0
        Wait 10 ms
        LT7686_RST = 1
        Wait 10 ms

                #ifdef RESETCHECKONLY
                    Dim LT7686_StatusReadCounter as Byte
                #endif

                #ifdef RESETCHECKONLY
                    LT7686_StatusReadCounter = 0
                    Do While ( LT7686_StatusRead & 0x01 ) <> 0x01 & ( LT7686_StatusReadCounter < RESETMAXATTEMPTS )
                #else
        Do While ( LT7686_StatusRead & 0x01 ) <> 0x01
                #endif

                // #ifdef RESETCHECKONLY
                    HSerPrint ", LT7686_REG_STSR status register Inhibited = " + Str( LT7686_StatusRead)
                    // LT7686_StatusReadCounter++
                // #endif

        Loop

    End Sub

Sub LT7686_Software_Reset()

        LT7686_WriteCMD( LT7686_REG_SRR )
        LT7686_WriteData( 0x01 )
        wait 1 ms

    End Sub

Function LT7686_Check_Init() As Byte

            // Reuse variables to save RAM
            Dim LT7686_Check_Init_Fail, LT7686_StatusReadResult, LT7686_Check_Init_Counter as Byte
            
            LT7686_Check_Init = False
            LT7686_Check_Init_Counter = 0

            LT7686_Check_Init_Fail = 0

                    #ifdef oneof(RESETCHECKONLY,SERIALDEBUG)
                        HserPrint "LT7686_Check_Init_Fail() Debug Information" : HserPrintCRLF 2
                    #endif     

            do
                LT7686_Check_Init_Counter++
                LT7686_Check_Init_Fail++
            
                    #ifdef oneof(RESETCHECKONLY,SERIALDEBUG)
                        HserPrint Str(LT7686_Check_Init_Counter) + ": "
                    #endif     

                LT7686_StatusReadResult = LT7686_StatusRead
                
                    #ifdef oneof(RESETCHECKONLY,SERIALDEBUG)
                        HserPrint "LT7686_StatusReadResult (LT7686_REG_STSR) =" + Str(LT7686_StatusReadResult)
                    #endif     
                
                if ( LT7686_StatusReadResult & 0x02 ) = 0x00 and LT7686_Check_Init_Fail < CHECKATTEMPTS Then     

                    wait 100 us                  
            
                            #ifdef oneof(RESETCHECKONLY,SERIALDEBUG)
                                HserPrint ", Write LT7686_REG_CCR(0x01) and Read(byte)"
                            #endif
            
                    LT7686_WriteCMD( 0x01 )
                    if( ( LT7686_DataRead() & 0x80 ) = 0x80 ) Then       // Check if CCR register and PLL are ready
                        LT7686_Check_Init = True

                                #ifdef oneof(RESETCHECKONLY,SERIALDEBUG)
                                    HserPrintCRLF
                                    HserPrint "LT7686 CCR register and PLL are ready": HserPrintCRLF
                                #endif                        

                        exit Sub
                    end if
                else
                        wait 100 us
            
                            #ifdef oneof(RESETCHECKONLY,SERIALDEBUG)
                                HserPrint ", Write LT7686_REG_CCR(0x01) and Write(0x80)"
                            #endif                       
            
                        LT7686_WriteCMD(0x01)                       
                        LT7686_WriteData(0x80)
                end if

                //~ Hard reset every 5 times
                if LT7686_Check_Init = 0 & LT7686_Check_Init_Fail = 5 Then
            
                            #ifdef oneof(RESETCHECKONLY,SERIALDEBUG)
                                HserPrint ", LT7686 Hardware Reset"
                            #endif                 
            
                    // LT7686_Hardware_Reset
                    LT7686_Check_Init_Fail = 0
                End if
            
                            #ifdef oneof(RESETCHECKONLY,SERIALDEBUG)
                                HserPrintCRLF
                            #endif
            
            Loop while ( LT7686_Check_Init = 0 & LT7686_Check_Init_Counter <> CHECKATTEMPTS )

    End Function

Sub LT7686_WriteCMD( IN __outbyte as Byte )

        LT7686_Check_Busy_Draw

        LT7686_CS = 0
        #ifdef HARDWARESPI
            // Send via Hardware SPI
            FastHWSPITransfer( __outbyte)
        #else

            dim __LT7686_outbuffer as Byte
            __LT7686_outbuffer = 0x00
            repeat 8
                if __LT7686_outbuffer.7 = ON  then
                set LT7686_DO ON
                else
                set LT7686_DO OFF
                end if
                SET LT7686_SCK STATE1
                Wait LT7686_STATE1_DELAY us
                rotate __LT7686_outbuffer left
                SET LT7686_SCK STATE2
                Wait LT7686_STATE2_DELAY us
            end repeat

            dim __LT7686_outbuffer as Byte
            __LT7686_outbuffer = __outbyte
            SET C OFF            
            repeat 8
                SET LT7686_SCK STATE1
                if __LT7686_outbuffer.7 = ON  then
                set LT7686_DO ON
                else
                set LT7686_DO OFF
                end if
                
                Wait LT7686_STATE1_DELAY us

                rotate __LT7686_outbuffer left
                
                SET LT7686_SCK STATE2
                Wait LT7686_STATE2_DELAY us
            end repeat
        #endif
        LT7686_CS = 1

    End Sub

Sub LT7686_WriteData( IN __outbyte as Byte )

        LT7686_Check_Busy_Draw

        LT7686_CS = 0
        #ifdef HARDWARESPI
            // Send via Hardware SPI
            FastHWSPITransfer( __outbyte)
        #else

            dim __LT7686_outbuffer as Byte
            __LT7686_outbuffer = 0x80
            repeat 8
                if __LT7686_outbuffer.7 = ON  then
                set LT7686_DO ON
                else
                set LT7686_DO OFF
                end if
                SET LT7686_SCK STATE1
                Wait LT7686_STATE1_DELAY us
                rotate __LT7686_outbuffer left
                SET LT7686_SCK STATE2
                Wait LT7686_STATE2_DELAY us
            end repeat

            dim __LT7686_outbuffer as Byte
            __LT7686_outbuffer = __outbyte            
            repeat 8
                if __LT7686_outbuffer.7 = ON  then
                set LT7686_DO ON
                else
                set LT7686_DO OFF
                end if
                SET LT7686_SCK STATE1
                Wait LT7686_STATE1_DELAY us
                rotate __LT7686_outbuffer left
                SET LT7686_SCK STATE2
                Wait LT7686_STATE2_DELAY us
            end repeat
        #endif
        LT7686_CS = 1
    End Sub

Function LT7686_DataRead

        LT7686_Check_Busy_Draw

        LT7686_DataRead = 0x00

        dim __LT7686_outbuffer as Long

        LT7686_CS = 0
        Wait LT7686_STATE1_DELAY us

        #ifdef HARDWARESPI
            // Send via Hardware SPI
            FastHWSPITransfer(__FLASHWord_U)
            FastHWSPITransfer(__FLASHWord_H)
            FastHWSPITransfer(__FLASHWord)
        #else

            __LT7686_outbuffer = 0xC0            
            repeat 8
                if __LT7686_outbuffer.7 = ON  then
                set LT7686_DO ON
                else
                set LT7686_DO OFF
                end if
                SET LT7686_SCK STATE1
                Wait LT7686_STATE1_DELAY us
                rotate __LT7686_outbuffer left
                SET LT7686_SCK STATE2
                Wait LT7686_STATE2_DELAY us
            end repeat
            
            Dir LT7686_DI In
            Set C Off
            repeat 8

                SET LT7686_SCK STATE1

                rotate LT7686_DataRead left

                Wait LT7686_STATE1_DELAY us

                if LT7686_DI = On then
                    set LT7686_DataRead.0 On
                Else
                    set LT7686_DataRead.0 Off
                end if
                
                SET LT7686_SCK STATE2
                Wait LT7686_STATE2_DELAY us

            end repeat

            Wait LT7686_STATE1_DELAY us
            Dir LT7686_DO Out

        #endif

        LT7686_CS = 1

    End Function





Function LT7686_StatusRead as Byte

        LT7686_StatusRead = 0x00

        dim __LT7686_outbuffer as Long

        LT7686_CS = 0
        #ifdef HARDWARESPI
            // Send via Hardware SPI
            FastHWSPITransfer(__FLASHWord_U)
            FastHWSPITransfer(__FLASHWord_H)
            FastHWSPITransfer(__FLASHWord)
        #else

            __LT7686_outbuffer = 0x40            
            repeat 8
                if __LT7686_outbuffer.7 = ON  then
                set LT7686_DO ON
                else
                set LT7686_DO OFF
                end if
                SET LT7686_SCK STATE1
                Wait LT7686_STATE1_DELAY us
                rotate __LT7686_outbuffer left
                SET LT7686_SCK STATE2
                Wait LT7686_STATE2_DELAY us
            end repeat
            
            Dir LT7686_DI In
            repeat 8

                SET LT7686_SCK STATE1
                Set C Off
                rotate LT7686_StatusRead left

                Wait LT7686_STATE1_DELAY us

                if LT7686_DI = On then
                    set LT7686_StatusRead.0 On
                Else
                    set LT7686_StatusRead.0 Off
                end if
                
                SET LT7686_SCK STATE2
                Wait LT7686_STATE2_DELAY us

            end repeat

            Wait LT7686_STATE1_DELAY us
            Dir LT7686_DO Out

        #endif

        LT7686_CS = 1

    End Function

Sub LT7686_Check_Busy_Draw

    // HserPrintByteCRLF LT7686_StatusRead    
    do while  ( ( LT7686_StatusRead & 0x08 ) = 0x08 )
        wait 5 us
	loop 
    // HserPrintByteCRLF LT7686_StatusRead 
    End Sub


Table LT7686_InitTFT_Dataset

    #insert "levetop800x480.h"

    End Table

// Registers and constants for LT7686  from Character/Graphic TFT LCD Controller

    #define LT7686_REG_SRR				0x00	// Software Reset Register (SRR)
    #define LT7686_REG_CCR				0x01	// Chip Configuration Register (CRR)
    #define LT7686_REG_MACR				0x02	// Memory Access Control Register (MACR)
    #define LT7686_REG_ICR				0x03	// Input Control Register (ICR)
    #define LT7686_REG_MRWDP			0x04	// Memory Data Read/Write Port (MRWDP)
    #define LT7686_REG_PPLLC1			0x05	// SCLK PLL Control Register 1 (PPLLC1)
    #define LT7686_REG_PPLLC2			0x06	// SCLK PLL Control Register 2 (PPLLC2)
    #define LT7686_REG_MPLLC1			0x07	// MCLK PLL Control Register 1 (MPLLC1)
    #define LT7686_REG_MPLLC2			0x08	// MCLK PLL Control Register 2 (MPLLC2)
    #define LT7686_REG_SPLLC1			0x09	// CCLK PLL Control Register 1 (SPLLC1)
    #define LT7686_REG_SPLLC2			0x0a	// CCLK PLL Control Register 2 (SPLLC2)
    #define LT7686_REG_INTEN			0x0b	// Interrupt Enable Register (INTEN)
    #define LT7686_REG_INTF				0x0c	// Interrupt Event Flag Register (INTF)
    #define LT7686_REG_MINTFR			0x0d	// Mask Interrupt Flag Register (MINTFR)
    #define LT7686_REG_PUENR			0x0e	// Pull-high control Register (PUENR)
    #define LT7686_REG_PSFSR			0x0f	// PDAT for PIO/key Function Select Register (PSFSR)
    #define LT7686_REG_MPWCTR			0x10	// Main/PIP Window Control Register (MPWCTR)
    #define LT7686_REG_PIPCDEP			0x11	// PIP Window Colour Depth Setting (PIPCDEP)
    #define LT7686_REG_DPCR				0x12	// Display Configuration Register (DPCR)
    #define LT7686_REG_PCSR				0x13	// Panel scan Clock and Data Setting Register (PCSR)
    #define LT7686_REG_HDWR				0x14	// Horizontal Display Width Register (HDWR)
    #define LT7686_REG_HDWFTR			0x15	// Horizontal Display Width Fine Tune Register (HDWFTR)
    #define LT7686_REG_HNDR				0x16	// Horizontal Non-Display Period Register (HNDR)
    #define LT7686_REG_HNDFTR			0x17	// Horizontal Non-Display Period Fine Tune Register (HNDFTR)
    #define LT7686_REG_HSTR				0x18	// HSYNC Start Position Register (HSTR)
    #define LT7686_REG_HPWR				0x19	// HSYNC Pulse Width Register (HPWR)
    #define LT7686_REG_VDHR0			0x1a	// Vertical Display Height Register 0 (VDHR0)
    #define LT7686_REG_VDHR1			0x1b	// Vertical Display Height Register 1 (VDHR1)
    #define LT7686_REG_VNDR0			0x1c	// Vertical Non-Display Period Register 0 (VNDR0)
    #define LT7686_REG_VNDR1			0x1d	// Vertical Non-Display Period Register 1 (VNDR1)
    #define LT7686_REG_VSTR				0x1e	// VSYNC Start Position Register (VSTR)
    #define LT7686_REG_VPWR				0x1f	// VSYNC Pulse Width Register (VPWR)
    #define LT7686_REG_MISA0			0x20	// Main Image Start Address 0 (MISA0)
    #define LT7686_REG_MISA1			0x21	// Main Image Start Address 1 (MISA1)
    #define LT7686_REG_MISA2			0x22	// Main Image Start Address 2 (MISA2)
    #define LT7686_REG_MISA3			0x23	// Main Image Start Address 3 (MISA3)
    #define LT7686_REG_MIW0				0x24	// Main Image Width 0 (MIW0)
    #define LT7686_REG_MIW1				0x25	// Main Image Width 1 (MIW1)
    #define LT7686_REG_MWULX0			0x26	// Main Window Upper-Left corner X-coordinates 0 (MWULX0)
    #define LT7686_REG_MWULX1			0x27	// Main Window Upper-Left corner X-coordinates 1 (MWULX1)
    #define LT7686_REG_MWULY0			0x28	// Main Window Upper-Left corner Y-coordinates 0 (MWULY0)
    #define LT7686_REG_MWULY1			0x29	// Main Window Upper-Left corner Y-coordinates 1 (MWULY1)
    #define LT7686_REG_PWDULX0			0x2a	// PIP 1 or 2 Window Display Upper-Left corner X-coordinates 0 (PWDULX0)
    #define LT7686_REG_PWDULX1			0x2b	// PIP 1 or 2 Window Display Upper-Left corner X-coordinates 1 (PWDULX1)
    #define LT7686_REG_PWDULY0			0x2c	// PIP 1 or 2 Window Display Upper-Left corner Y-coordinates 0 (PWDULY0)
    #define LT7686_REG_PWDULY1			0x2d	// PIP 1 or 2 Window Display Upper-Left corner Y-coordinates 1 (PWDULY1)
    #define LT7686_REG_PISA0			0x2e	// PIP 1 or 2 Image Start Address 0 (PISA0)
    #define LT7686_REG_PISA1			0x2f	// PIP 1 or 2 Image Start Address 1 (PISA1)
    #define LT7686_REG_PISA2			0x30	// PIP 1 or 2 Image Start Address 2 (PISA2)
    #define LT7686_REG_PISA3			0x31	// PIP 1 or 2 Image Start Address 3 (PISA3)
    #define LT7686_REG_PIW0				0x32	// PIP 1 or 2 Image Width 0 (PIW0)
    #define LT7686_REG_PIW1				0x33	// PIP 1 or 2 Image Width 1 (PIW1)
    #define LT7686_REG_PWIULX0			0x34	// PIP 1 or 2 Window Image Upper-Left corner X-coordinates 0 (PWIULX0)
    #define LT7686_REG_PWIULX1			0x35	// PIP 1 or 2 Window Image Upper-Left corner X-coordinates 1 (PWIULX1)
    #define LT7686_REG_PWIULY0			0x36	// PIP 1 or 2 Window Image Upper-Left corner Y-coordinates 0 (PWIULY0)
    #define LT7686_REG_PWIULY1			0x37	// PIP 1 or 2 Window Image Upper-Left corner Y-coordinates 1 (PWIULY1)
    #define LT7686_REG_PWW0				0x38	// PIP 1 or 2 Window Width 0 (PWW0)
    #define LT7686_REG_PWW1				0x39	// PIP 1 or 2 Window Width 1 (PWW1)
    #define LT7686_REG_PWH0				0x3a	// PIP 1 or 2 Window Height 0 (PWH0)
    #define LT7686_REG_PWH1				0x3b	// PIP 1 or 2 Window Height 1 (PWH1)
    #define LT7686_REG_GTCCR			0x3c	// Graphic / Text Cursor Control Register (GTCCR)
    #define LT7686_REG_BTCR				0x3d	// Blink Time Control Register (BTCR)
    #define LT7686_REG_CURHS			0x3e	// Text Cursor Horizontal Size Register (CURHS)
    #define LT7686_REG_CURVS			0x3f	// Text Cursor Vertical Size Register (CURVS)
    #define LT7686_REG_GCHP0			0x40	// Graphic Cursor Horizontal Position Register 0 (GCHP0)
    #define LT7686_REG_GCHP1			0x41	// Graphic Cursor Horizontal Position Register 1 (GCHP1)
    #define LT7686_REG_GCVP0			0x42	// Graphic Cursor Vertical Position Register 0 (GCVP0)
    #define LT7686_REG_GCVP1			0x43	// Graphic Cursor Vertical Position Register 1 (GCVP1)
    #define	LT7686_REG_GCC0				0x44	// Graphic Cursor Colour 0 (GCC0)
    #define LT7686_REG_GCC1				0x45	// Graphic Cursor Colour 1 (GCC1)
    // 0x46 - 0x4f reserved
    #define LT7686_REG_CVSSA0			0x50	// Canvas Start address 0 (CVSSA0)
    #define LT7686_REG_CVSSA1			0x51	// Canvas Start address 1 (CVSSA1)
    #define LT7686_REG_CVSSA2			0x52	// Canvas Start address 2 (CVSSA2)
    #define LT7686_REG_CVSSA3			0x53	// Canvas Start address 3 (CVSSA3)
    #define LT7686_REG_CVS_IMWTH0		0x54	// Canvas image width 0 (CVS_IMWTH0)
    #define LT7686_REG_CVS_IMWTH1		0x55	// Canvas image width 1 (CVS_IMWTH1)
    #define LT7686_REG_AWUL_X0			0x56	// Active Window Upper-Left corner X-coordinates 0 (AWUL_X0)
    #define LT7686_REG_AWUL_X1			0x57	// Active Window Upper-Left corner X-coordinates 1 (AWUL_X1)
    #define LT7686_REG_AWUL_Y0			0x58	// Active Window Upper-Left corner Y-coordinates 0 (AWUL_Y0)
    #define LT7686_REG_AWUL_Y1			0x59	// Active Window Upper-Left corner Y-coordinates 1 (AWUL_Y1)
    #define LT7686_REG_AW_WTH0			0x5a	// Active Window Width 0 (AW_WTH0)
    #define LT7686_REG_AW_WTH1			0x5b	// Active Window Width 1 (AW_WTH1)
    #define LT7686_REG_AW_HT0			0x5c	// Active Window Height 0 (AW_HT0)
    #define LT7686_REG_AW_HT1			0x5d	// Active Window Height 1 (AW_HT1)
    #define LT7686_REG_AW_COLOR			0x5e	// Color Depth of Canvas & Active Window (AW_COLOR)
    #define LT7686_REG_CURH0			0x5f	// Graphic Read/Write position Horizontal Position Register 0 (CURH0)
    #define LT7686_REG_CURH1			0x60	// Graphic Read/Write position Horizontal Position Register 1 (CURH1)
    #define LT7686_REG_CURV0			0x61	// Graphic Read/Write position Vertical Position Register 0 (CURV0)
    #define LT7686_REG_CURV1			0x62	// Graphic Read/Write position Vertical Position Register 1 (CURV1)
    #define LT7686_REG_F_CURX0			0x63	// Text Write X-coordinates Register 0 (F_CURX0)
    #define LT7686_REG_F_CURX1			0x64	// Text Write X-coordinates Register 1 (F_CURX1)
    #define LT7686_REG_F_CURY0			0x65	// Text Write Y-coordinates Register 0 (F_CURY0)
    #define LT7686_REG_F_CURY1			0x66	// Text Write Y-coordinates Register 1 (F_CURY1)
    #define LT7686_REG_DCR0				0x67	// Draw Line / Triangle Control Register 0 (DCR0)
    #define LT7686_REG_DLHSR0			0x68	// Draw Line/Square/Triangle Point 1 X-coordinates Register 0 (DLHSR0)
    #define LT7686_REG_DLHSR1			0x69	// Draw Line/Square/Triangle Point 1 X-coordinates Register 1 (DLHSR1)
    #define LT7686_REG_DLVSR0			0x6a	// Draw Line/Square/Triangle Point 1 Y-coordinates Register 0 (DLVSR0)
    #define LT7686_REG_DLVSR1			0x6b	// Draw Line/Square/Triangle Point 1 Y-coordinates Register 1 (DLVSR1)
    #define LT7686_REG_DLHER0			0x6c	// Draw Line/Square/Triangle Point 2 X-coordinates Register 0 (DLHER0)
    #define LT7686_REG_DLHER1			0x6d	// Draw Line/Square/Triangle Point 2 X-coordinates Register 1 (DLHER1)
    #define LT7686_REG_DLVER0			0x6e	// Draw Line/Square/Triangle Point 2 Y-coordinates Register 0 (DLVER0)
    #define LT7686_REG_DLVER1			0x6f	// Draw Line/Square/Triangle Point 2 Y-coordinates REgister 1 (DLVER1)
    #define LT7686_REG_DTPH0			0x70	// Draw Triangle Point 3 X-coordinates Register 0 (DTPH0)
    #define LT7686_REG_DTPH1			0x71	// Draw Triangle Point 3 X-coordinates Register 1 (DTPH1)
    #define LT7686_REG_DTPV0			0x72	// Draw Triangle Point 3 Y-coordinates Register 0 (DTPV0)
    #define LT7686_REG_DTPV1			0x73	// Draw Triangle Point 3 Y-coordinates Register 1 (DTPV1)
    // 0x74 - 0x75 reserved
    #define LT7686_REG_DCR1				0x76	// Draw Circle/Ellipse/Ellipse Curve/Circle Square Control Register 1 (DCR1)
    #define LT7686_REG_ELL_A0			0x77	// Draw Circle/Ellipse/Circle Square Major radius Setting Register (ELL_A0)
    #define LT7686_REG_ELL_A1			0x78	// Draw Circle/Ellipse/Circle Square Major radius Setting Register (ELL_A1)
    #define LT7686_REG_ELL_B0			0x79	// Draw Circle/Ellipse/Circle Square Minor radius Setting Register (ELL_B0)
    #define LT7686_REG_ELL_B1			0x7a	// Draw Circle/Ellipse/Circle Square Minor radius Setting Register (ELL_B1)
    #define LT7686_REG_DEHR0			0x7b	// Draw Circle/Ellipse/Circle Square Center X-coordinates Register 0 (DEHR0)
    #define LT7686_REG_DEHR1			0x7c	// Draw Circle/Ellipse/Circle Square Center X-coordinates Register 1 (DEHR1)
    #define LT7686_REG_DEVR0			0x7d	// Draw Circle/Ellipse/Circle Square Center Y-coordinates Register 0 (DEVR0)
    #define LT7686_REG_DEVR1			0x7e	// Draw Circle/Ellipse/Circle Square Center Y-coordinates Register 1 (DEVR1)
    // 0x7f reserved
    #define LT7686_REG_PSCLR			0x84	// PWM Prescaler Register (PSCLR)
    #define LT7686_REG_PMUXR			0x85	// PWM clock Mux Register (PMUXR)
    #define LT7686_REG_PCFGR			0x86	// PWM Configuration Register (PCFGR)
    #define LT7686_REG_DZ_LENGTH		0x87	// Timer 0 Dead zone length register (DZ_LENGTH)
    #define LT7686_REG_TCMPB0L			0x88	// Timer 0 compare buffer register (TCMPB0L)
    #define LT7686_REG_TCMPB0H			0x89	// Timer 0 compare buffer register (TCMPB0H)
    #define LT7686_REG_TCNTB0L			0x8a	// Timer 0 count buffer register (TCNTB0L)
    #define LT7686_REG_TCNTB0H			0x8b	// Timer 0 count buffer register (TCNTB0H)
    #define LT7686_REG_TCMPB1L			0x8c	// Timer 1 compare buffer register (TCMPB1L)
    #define LT7686_REG_TCMPB1H			0x8d	// Timer 1 compare buffer register (TCMPB1H)
    #define LT7686_REG_TCNTB1L			0x8e	// Timer 1 count buffer register (TCNTB1L)
    #define LT7686_REG_TCNTB1H			0x8f	// Timer 1 count buffer register (TCNTB1H)
    #define LT7686_REG_BTE_CTRL0		0x90	// BTE Function Control Register 0 (BTE_CTRL0)
    #define LT7686_REG_BTE_CTRL1		0x91	// BTE Function Control Register 1 (BTE_CTRL1)
    #define LT7686_REG_BTE_COLR			0x92	// Source 0/1 & Destination Color Depth (BTE_COLR)
    #define LT7686_REG_S0_STR0			0x93	// Source 0 memory start address 0 (S0_STR0)
    #define LT7686_REG_S0_STR1			0x94	// Source 0 memory start address 1 (S0_STR1)
    #define LT7686_REG_S0_STR2			0x95	// Source 0 memory start address 2 (S0_STR2)
    #define LT7686_REG_S0_STR3			0x96	// Source 0 memory start address 3 (S0_STR3)
    #define LT7686_REG_S0_WTH0			0x97	// Source 0 image width 0 (S0_WTH0)
    #define LT7686_REG_S0_WTH1			0x98	// Source 0 image width 1 (S0_WTH1)
    #define LT7686_REG_S0_X0			0x99	// Source 0 Window Upper-Left corner X-coordinates 0 (S0_X0)
    #define LT7686_REG_S0_X1			0x9a	// Source 0 Window Upper-Left corner X-coordinates 1 (S0_X1)
    #define LT7686_REG_S0_Y0			0x9b	// Source 0 Window Upper-Left corner Y-coordinates 0 (S0_Y0)
    #define LT7686_REG_S0_Y1			0x9c	// Source 0 Window Upper-Left corner Y-coordinates 1 (S0_Y1)
    #define LT7686_REG_S1_STR0			0x9d	// Source 1 memory start address 0 (S1_STR0)
    #define LT7686_REG_S1_STR1			0x9e	// Source 1 memory start address 1 (S1_STR1)
    #define LT7686_REG_S1_STR2			0x9f	// Source 1 memory start address 2 (S1_STR2)
    #define LT7686_REG_S1_STR3			0xa0	// Source 1 memory start address 3 (S1_STR3)
    #define LT7686_REG_S1_WTH0			0xa1	// Source 1 image width 0 (S1_WTH0)
    #define LT7686_REG_S1_WTH1			0xa2	// Source 1 image width 1 (S1_WTH1)
    #define LT7686_REG_S1_X0			0xa3	// Source 1 Window Upper-Left corner X-coordinates 0 (S1_X0)
    #define LT7686_REG_S1_X1			0xa4	// Source 1 Window Upper-Left corner X-coordinates 1 (S1_X1)
    #define	LT7686_REG_S1_Y0			0xa5	// Source 1 Window Upper-Left corner Y-coordinates 0 (S1_Y0)
    #define LT7686_REG_S1_Y1			0xa6	// Source 1 Window Upper-Left corner Y-coordinates 1 (S1_Y1)
    #define LT7686_REG_DT_STR0			0xa7	// Destination memory start address 0 (DT_STR0)
    #define LT7686_REG_DT_STR1			0xa8	// Destination memory start address 1 (DT_STR1)
    #define LT7686_REG_DT_STR2			0xa9	// Destination memory start address 2 (DT_STR2)
    #define LT7686_REG_DT_STR3			0xaa	// Destination memory start address 3 (DT_STR3)
    #define LT7686_REG_DT_WTH0			0xab	// Destination image width 0 (DT_WTH0)
    #define LT7686_REG_DT_WTH1			0xac	// Destination image width 1 (DT_WTH1)
    #define LT7686_REG_DT_X0			0xad	// Destination Window Upper-Left corner X-coordinates 0 (DT_X0)
    #define LT7686_REG_DT_X1			0xae	// Destination Window Upper-Left corner X-coordinates 1 (DT_X1)
    #define LT7686_REG_DT_Y0			0xaf	// Destination Window Upper-Left corner Y-coordinates 0 (DT_Y0)
    #define LT7686_REG_DT_Y1			0xb0	// Destination Window Upper-Left corner Y-coordinates 1 (DT_Y1)
    #define LT7686_REG_BTE_WTH0			0xb1	// BTE Window Width 0 (BTE_WTH0)
    #define LT7686_REG_BTE_WTH1			0xb2	// BTE Window Width 1 (BTE_WTH1)
    #define LT7686_REG_BTE_HIG0			0xb3	// BTE Window Height 0 (BTE_HIG0)
    #define LT7686_REG_BTE_HIG1			0xb4	// BTE Window Height 1 (BTE_HIG1)
    #define LT7686_REG_APB_CTRL			0xb5	// Alpha Blending (APB_CTRL)
    #define LT7686_REG_DMA_CTRL			0xb6	// Serial flash DMA Controller REG (DMA_CTRL)
    #define LT7686_REG_SFL_CTRL			0xb7	// Serial Flash/ROM Controller Register (SFL_CTRL)
    #define LT7686_REG_SPIDR			0xb8	// SPI master Tx/Rx FIFO Data Register (SPIDR)
    #define LT7686_REG_SPIMCR2			0xb9	// SPI master Control Register (SPIMCR2)
    #define LT7686_REG_SPIMSR			0xba	// SPI master Status Register (SPIMSR)
    #define LT7686_REG_SPI_DIVSOR		0xbb	// SPI Clock period (SPI_DIVSOR)
    #define LT7686_REG_DMA_SSTR0		0xbc	// Serial flash DMA Source Starting Address 0 (DMA_SSTR0)
    #define LT7686_REG_DMA_SSTR1		0xbd	// Serial flash DMA Source Starting Address 1 (DMA_SSTR1)
    #define LT7686_REG_DMA_SSTR2		0xbe	// Serial flash DMA Source Starting Address 2 (DMA_SSTR2)
    #define LT7686_REG_DMA_SSTR3		0xbf	// Serial flash DMA Source Starting Address 3 (DMA_SSTR3)
    #define LT7686_REG_DMA_DX0			0xc0	// DMA Destination Window Upper-Left corner X-coordinates 0 (DMA_DX0)
    #define LT7686_REG_DMA_DX1			0xc1	// DMA Destination Window Upper-Left corner X-coordinates 1 (DMA_DX1)
    #define LT7686_REG_DMA_DY0			0xc2	// DMA Destination Window Upper-Left corner Y-coordinates 0 (DMA_DY0)
    #define	LT7686_REG_DMA_DY1			0xc3	// DMA Destination Window Upper-Left corner Y-coordinates 1 (DMA_DY1)
    // 0xc4 - 0xc5 reserved
    #define LT7686_REG_DMAW_WTH0		0xc6	// DMA Block Width 0 (DMAW_WTH0)
    #define LT7686_REG_DMAW_WTH1		0xc7	// DMA Block Width 1 (DMAW_WTH1)
    #define LT7686_REG_DMAW_HIGH0		0xc8	// DMA Block Height 0 (DMAW_HIGH0)
    #define LT7686_REG_DMAW_HIGH1		0xc9	// DMA Block Height 1 (DMAW_HIGH1)
    #define LT7686_REG_DMA_SWTH0		0xca	// DMA Source Picture Width 0 (DMA_SWTH0)
    #define LT7686_REG_DMA_SWTH1		0xcb	// DMA Source Picture Width 1 (DMA_SWTH1)
    #define LT7686_REG_CCR0				0xcc	// Character Control Register 0 (CCR0)
    #define LT7686_REG_CCR1				0xcd	// Character Control Register 1 (CCR1)
    #define LT7686_REG_GTFNT_SEL		0xce	// GT Character ROM Select (GTFNT_SEL)
    #define LT7686_REG_GTFNT_CR			0xcf	// GT Character ROM Control register (GTFNT_CR)
    #define LT7686_REG_FLDR				0xd0	// Character Line gap Setting Register (FLDR)
    #define LT7686_REG_F2FSSR			0xd1	// Character to Character Space Setting Register (F2FSSR)
    #define LT7686_REG_FGCR				0xd2	// Foreground Color Register - Red (FGCR)
    #define LT7686_REG_FGCG				0xd3	// Foreground Color Register - Green (FGCG)
    #define LT7686_REG_FGCB				0xd4	// Foreground Color Register - Blue (FGCB)
    #define	LT7686_REG_BGCR				0xd5	// Background Color Register - Red (GBCR)
    #define LT7686_REG_BGCG				0xd6	// Background Color Register - Green (BGCG)
    #define LT7686_REG_BGCB				0xd7	// Background Color Register - Blue (BGCB)
    // 0xd8 - 0xda reserved
    #define LT7686_REG_CGRAM_STR0		0xdb	// CGRAM Start Address 0 (CGRAM_STR0)
    #define LT7686_REG_CGRAM_STR1		0xdc	// CGRAM Start Address 1 (CGRAM_STR1)
    #define LT7686_REG_CGRAM_STR2		0xdd	// CGRAM Start Address 2 (CGRAM_STR2)
    #define LT7686_REG_CGRAM_STR3		0xde	// CGRAM Start Address 3 (CGRAM_STR3)
    #define LT7686_REG_PMU				0xdf	// Power Management register (PMU)
    #define LT7686_REG_SDRAR			0xe0	// SDRAM attribute register (SDRAR)
    #define LT7686_REG_SDRMD			0xe1	// SDRAM mode register & extended mode register (SDRMD)
    #define LT7686_REG_SDR_REF_ITVL0	0xe2	// SDRAM auto refresh interval (SDR_REG_ITVL0)
    #define LT7686_REG_SDR_REF_ITVL1	0xe3	// SDRAM auto refresh interval (SDR_REG_ITVL1)
    #define LT7686_REG_SDRCR			0xe4	// SDRAM Control register (SDRCR)
    #define	LT7686_REG_I2CMCPR0			0xe5	// I2C Master Clock Pre-scale Register 0 (I2CMCPR0)
    #define LT7686_REG_I2CMCPR1			0xe6	// I2C Master Clock Pre-scale Register 1 (I2CMCPR1)
    #define LT7686_REG_I2CMTXR			0xe7	// I2C Master Transmit Register (I2CMTXR)
    #define LT7686_REG_I2CMRXR			0xe8	// I2C Master Receive Register (I2CMRXR)
    #define LT7686_REG_I2CMCMDR			0xe9	// I2C Master Command Register (I2CMCMDR)
    #define	LT7686_REG_I2CMSTUR			0xea	// I2C Master Status Register (I2CMSTUR)
    #define	LT7686_REG_GPIOAD			0xf0	// GPIO-A direction (GPIOAD)
    #define LT7686_REG_GPIOA			0xf1	// GPIO-A
    #define LT7686_REG_GPIOB			0xf2	// GPIO-B
    #define LT7686_REG_GPIOCD			0xf3	// GPIO-C direction (GPIOCD)
    #define LT7686_REG_GPIOC			0xf4	// GPIO-C
    #define LT7686_REG_GPIODD			0xf5	// GPIO-D direction (GPIODD)
    #define LT7686_REG_GPIOD			0xf6	// GPIO-D
    #define LT7686_REG_GPIOED			0xf7	// GPIO-E direction (GPIOED)
    #define LT7686_REG_GPIOE			0xf8	// GPIO-E
    #define LT7686_REG_GPIOFD			0xf9	// GPIO-F direction (GPIOFD)
    #define LT7686_REG_GPIOF			0xfa	// GPIO-F
    #define LT7686_REG_KSCR1			0xfb	// Key-Scan Control Register 1 (KSCR1)
    #define LT7686_REG_KSCR2			0xfc	// Key-Scan Controller Register 2 (KSCR2)
    #define	LT7686_REG_KSDR0			0xfd	// Key-Scan Data Register (KSDR0)
    #define LT7686_REG_KSDR1			0xfe	// Key-Scan Data Register (KSDR1)
    #define LT7686_REG_KSDR2			0xff	// Key-Scan Data Register (KSDR2)

    // Constants
    #define	LT7686_OSC_FREQ				10							//  crystal clock (MHz)
    #define	LT7686_DRAM_FREQ			100							//  SDRAM clock frequency (MHz)
    #define LT7686_CORE_FREQ			100							//  core (system) clock frequency (MHz)
    #define LT7686_SCAN_FREQ			50							//  pixel scan clock frequency (MHz)

    #define LT7686_PANEL_HNDR			160							//  horizontal non-display period or back porch
    #define LT7686_PANEL_HSTR			160							//  horizontal start position or front porch
    #define LT7686_PANEL_HPWR			70							//  HSYNC pulse width
    #define LT7686_PANEL_VNDR			23							//  vertical non-display period
    #define LT7686_PANEL_VSTR			12							//  vertical start position
    #define LT7686_PANEL_VPWR			10							//  VSYNC pulse width

    #define LT7686_PLL_DIV_2			0x02						//  PLL divided by 2
    #define LT7686_PLL_DIV_4			0x04						//  PLL divided by 4
    #define LT7686_PLL_DIV_8			0x06						//  PLL divided by 8
    #define LT7686_PLL_DIV_16			0x16						//  PLL divided by 16
    #define LT7686_PLL_DIV_32			0x26						//  PLL divided by 32
    #define LT7686_PLL_DIV_64			0x36						//  PLL divided by 64

    #define LT7686_STATUS_READ_REGISTER     0x40
    #define LT7686_REGISTER_ADDRESS         0x00
    #define LT7686_WRITE_REGISTER_MEM       0x80
    #define LT7686_STATUS_WRITE_REGISTER    0xC0
    


#script
    // script code for LT7686 library

    If GLCD_TYPE = LT7686_800_600_BLUE Then
        //  #include <GLCD_LT7686.h>
        InitGLCD = InitGLCD_LT7686
        GLCDCLS = GLCDCLS_LT7686
        FilledBox = FilledBox_LT7686
        Box = Box_LT7686
        If DEF(PICAS) Then
            _Line = LINE_LT7686
        End If
        If NODEF(PICAS) Then
            Line = LINE_LT7686
        End if
        Circle = Circle_LT7686
        FilledCircle = FilledCircle_LT7686

        GLCDDrawChar = GLCDDrawChar_LT7686
        GLCDDrawString = GLCDDrawString_LT7686

        Pset = Pset_LT7686
        GLCDRotate = GLCDRotate_LT7686
        glcd_type_string = "LT7686"
        GLCD_WIDTH = 800
        GLCD_HEIGHT = 600
        LT7686_GLCD_HEIGHT = GLCDDeviceHeight
        LT7686_GLCD_WIDTH = GLCDDeviceWidth

        IF NODEF(LT7686_STATE1_DELAY) THEN
            LT7686_STATE1_DELAY = 0
        END IF
        IF NODEF(LT7686_STATE2_DELAY) THEN
            LT7686_STATE2_DELAY = 0
        END IF
        SCRIPT_SDRAM_ITV = INT(((64000000 / 8192) / (1000 / LT7686_DRAM_FREQ))-2)
        SCRIPT_SDRAM_ITV_H = INT(INT(((64000000 / 8192) / (1000 / LT7686_DRAM_FREQ))-2) / 256)
        SCRIPT_SDRAM_ITV_L = (INT(((64000000 / 8192) / (1000 / LT7686_DRAM_FREQ))-2) AND 255)
        IF DEF(SCRIPTDEBUG) THEN
            warning SCRIPT_SDRAM_ITV
        END IF
    END IF

    #endscript

