<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\OBJ\SMT32F103RCT6_LT768_App.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\OBJ\SMT32F103RCT6_LT768_App.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Dec 27 10:29:09 2023
<BR><P>
<H3>Maximum Stack Usage =        560 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Select_Function &rArr; Controller_Demo &rArr; Pointer_Show &rArr; TEST_DoubleTriangle &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1f]">CAN_RX1_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[20]">CAN_SCE_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[15]">DMAChannel1_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[16]">DMAChannel2_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[17]">DMAChannel3_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[18]">DMAChannel4_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[19]">DMAChannel5_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1a]">DMAChannel6_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1b]">DMAChannel7_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from gt911.o(i.EXTI9_5_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN_TX_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN_RX0_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[36]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from stm32f10x.o(.text)
 <LI><a href="#[38]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[37]">fputc</a> from usart.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[35]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[36]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(.text)
</UL>
<P><STRONG><a name="[1bf]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[39]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[50]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1c0]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1c1]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1c2]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1c3]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[1c4]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1c5]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMAChannel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMAChannel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMAChannel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMAChannel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMAChannel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMAChannel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMAChannel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Rectangle
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Polygon
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Pillar_Demo
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Line_Curve
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Circle_Ellipse
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_BTE
</UL>

<P><STRONG><a name="[1c6]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_DoubleTriangle
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_DoubleTriangle
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[1a5]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_DoubleTriangle
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer1_Turn
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SineWaveDate
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer1_Turn
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_DoubleTriangle
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SineWaveDate
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SineWaveDate
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLine_Width
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_DoubleTriangle
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SineWaveDate
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLine_Width
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_DoubleTriangle
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SineWaveDate
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[1a6]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_DoubleTriangle
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SineWaveDate
</UL>

<P><STRONG><a name="[181]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer1_Turn
</UL>

<P><STRONG><a name="[1c7]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLine_Width
</UL>

<P><STRONG><a name="[136]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLine_Width
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_DoubleTriangle
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer1_Turn
</UL>

<P><STRONG><a name="[1c8]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer1_Turn
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1c9]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1ca]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1cb]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[3c]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[44]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[43]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[3a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1cd]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1ce]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1cf]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>Active_Window_WH</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lt768.o(i.Active_Window_WH))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Active_Window_WH &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUp_picture
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GUI
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waveform_Demo
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Demo
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Panel
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Demo
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Outside_Font
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Table
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Rectangle
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Polygon
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Pillar_Demo
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Line_Curve
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Circle_Ellipse
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Levetop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Demo
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Demo
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cartoon_Show
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_Control
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_slide_frame_buffer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_BTE
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_Alpha_Blending
</UL>

<P><STRONG><a name="[54]"></a>Active_Window_XY</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lt768.o(i.Active_Window_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Active_Window_XY &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUp_picture
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GUI
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waveform_Demo
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Demo
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Panel
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Demo
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Outside_Font
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Table
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Rectangle
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Polygon
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Pillar_Demo
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Line_Curve
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Circle_Ellipse
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Levetop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Demo
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Demo
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cartoon_Show
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_Control
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_slide_frame_buffer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_BTE
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_Alpha_Blending
</UL>

<P><STRONG><a name="[55]"></a>App_Demo_Alpha_Blending</STRONG> (Thumb, 324 bytes, Stack size 56 bytes, lt768_demo.o(i.App_Demo_Alpha_Blending))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = App_Demo_Alpha_Blending &rArr; Screen_delay_Count &rArr; Scan_Screen_Delay_1ms &rArr; gt911_Scan &rArr; TP_read_XY &rArr; LT_I2C_Read_NByte &rArr; LT768_I2CM_transmit_Progress &rArr; LCD_DataRead &rArr; SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_delay_Count
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Alpha_Blending
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Window_Start_XY
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Width
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Start_Address
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_XY
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_WH
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
</UL>

<P><STRONG><a name="[60]"></a>App_Demo_BTE</STRONG> (Thumb, 1536 bytes, Stack size 88 bytes, lt768_demo.o(i.App_Demo_BTE))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = App_Demo_BTE &rArr; Screen_delay_Count &rArr; Scan_Screen_Delay_1ms &rArr; gt911_Scan &rArr; TP_read_XY &rArr; LT_I2C_Read_NByte &rArr; LT768_I2CM_transmit_Progress &rArr; LCD_DataRead &rArr; SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_delay_Count
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLine
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Window_Start_XY
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Width
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Start_Address
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_XY
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_WH
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
</UL>

<P><STRONG><a name="[65]"></a>App_Demo_slide_frame_buffer</STRONG> (Thumb, 540 bytes, Stack size 32 bytes, lt768_demo.o(i.App_Demo_slide_frame_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = App_Demo_slide_frame_buffer &rArr; Screen_delay_Count &rArr; Scan_Screen_Delay_1ms &rArr; gt911_Scan &rArr; TP_read_XY &rArr; LT_I2C_Read_NByte &rArr; LT768_I2CM_transmit_Progress &rArr; LCD_DataRead &rArr; SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Key_delay
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_delay_Count
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Window_Start_XY
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Width
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Start_Address
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_XY
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_WH
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
</UL>

<P><STRONG><a name="[5e]"></a>BTE_Alpha_Blending</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, lt768_lib.o(i.BTE_Alpha_Blending))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BTE_Alpha_Blending &rArr; BTE_Window_Size &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_BTE_Busy
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Window_Size
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S1_Window_Start_XY
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S1_Memory_Start_Address
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S1_Image_Width
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S1_Color_16bpp
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S0_Window_Start_XY
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S0_Memory_Start_Address
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S0_Image_Width
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S0_Color_16bpp
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Operation_Code
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Enable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Destination_Window_Start_XY
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Destination_Memory_Start_Address
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Destination_Image_Width
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Destination_Color_16bpp
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Alpha_Blending_Effect
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Demo
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_Alpha_Blending
</UL>

<P><STRONG><a name="[76]"></a>BTE_Alpha_Blending_Effect</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lt768.o(i.BTE_Alpha_Blending_Effect))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BTE_Alpha_Blending_Effect &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Alpha_Blending
</UL>

<P><STRONG><a name="[6a]"></a>BTE_Destination_Color_16bpp</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.BTE_Destination_Color_16bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BTE_Destination_Color_16bpp &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_Chroma_key_8
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_8
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Solid_Fill
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Alpha_Blending
</UL>

<P><STRONG><a name="[72]"></a>BTE_Destination_Image_Width</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lt768.o(i.BTE_Destination_Image_Width))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BTE_Destination_Image_Width &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_Chroma_key_8
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_8
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Solid_Fill
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Alpha_Blending
</UL>

<P><STRONG><a name="[71]"></a>BTE_Destination_Memory_Start_Address</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lt768.o(i.BTE_Destination_Memory_Start_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BTE_Destination_Memory_Start_Address &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_Chroma_key_8
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_8
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Solid_Fill
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Alpha_Blending
</UL>

<P><STRONG><a name="[73]"></a>BTE_Destination_Window_Start_XY</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lt768.o(i.BTE_Destination_Window_Start_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BTE_Destination_Window_Start_XY &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_Chroma_key_8
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_8
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Solid_Fill
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Alpha_Blending
</UL>

<P><STRONG><a name="[77]"></a>BTE_Enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.BTE_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BTE_Enable &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_Chroma_key_8
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_8
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Solid_Fill
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Alpha_Blending
</UL>

<P><STRONG><a name="[75]"></a>BTE_Operation_Code</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lt768.o(i.BTE_Operation_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BTE_Operation_Code &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_Chroma_key_8
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_8
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Solid_Fill
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Alpha_Blending
</UL>

<P><STRONG><a name="[7c]"></a>BTE_ROP_Code</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lt768.o(i.BTE_ROP_Code))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BTE_ROP_Code &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_Chroma_key_8
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_8
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
</UL>

<P><STRONG><a name="[68]"></a>BTE_S0_Color_16bpp</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.BTE_S0_Color_16bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BTE_S0_Color_16bpp &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Alpha_Blending
</UL>

<P><STRONG><a name="[7d]"></a>BTE_S0_Color_8bpp</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.BTE_S0_Color_8bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BTE_S0_Color_8bpp &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_Chroma_key_8
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_8
</UL>

<P><STRONG><a name="[6c]"></a>BTE_S0_Image_Width</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lt768.o(i.BTE_S0_Image_Width))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BTE_S0_Image_Width &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_Chroma_key_8
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_8
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Alpha_Blending
</UL>

<P><STRONG><a name="[6b]"></a>BTE_S0_Memory_Start_Address</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lt768.o(i.BTE_S0_Memory_Start_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BTE_S0_Memory_Start_Address &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_Chroma_key_8
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_8
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Alpha_Blending
</UL>

<P><STRONG><a name="[6d]"></a>BTE_S0_Window_Start_XY</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lt768.o(i.BTE_S0_Window_Start_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BTE_S0_Window_Start_XY &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_Chroma_key_8
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_8
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Alpha_Blending
</UL>

<P><STRONG><a name="[69]"></a>BTE_S1_Color_16bpp</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lt768.o(i.BTE_S1_Color_16bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BTE_S1_Color_16bpp &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Alpha_Blending
</UL>

<P><STRONG><a name="[6f]"></a>BTE_S1_Image_Width</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lt768.o(i.BTE_S1_Image_Width))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BTE_S1_Image_Width &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Alpha_Blending
</UL>

<P><STRONG><a name="[6e]"></a>BTE_S1_Memory_Start_Address</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lt768.o(i.BTE_S1_Memory_Start_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BTE_S1_Memory_Start_Address &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Alpha_Blending
</UL>

<P><STRONG><a name="[70]"></a>BTE_S1_Window_Start_XY</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lt768.o(i.BTE_S1_Window_Start_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BTE_S1_Window_Start_XY &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Alpha_Blending
</UL>

<P><STRONG><a name="[7e]"></a>BTE_Solid_Fill</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, lt768_lib.o(i.BTE_Solid_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BTE_Solid_Fill &rArr; BTE_Window_Size &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_BTE_Busy
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Window_Size
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Operation_Code
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Enable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Destination_Window_Start_XY
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Destination_Memory_Start_Address
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Destination_Image_Width
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Destination_Color_16bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Pillar_Demo
</UL>

<P><STRONG><a name="[74]"></a>BTE_Window_Size</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lt768.o(i.BTE_Window_Size))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BTE_Window_Size &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_Chroma_key_8
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_8
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Solid_Fill
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Alpha_Blending
</UL>

<P><STRONG><a name="[80]"></a>Background_color_65k</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lt768.o(i.Background_color_65k))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Background_color_65k &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Text
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Outside_Font_String
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Internal_Font_String
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_8
</UL>

<P><STRONG><a name="[81]"></a>Backlight_Control</STRONG> (Thumb, 658 bytes, Stack size 56 bytes, lt768_demo.o(i.Backlight_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Backlight_Control &rArr; LT768_Select_Outside_Font_Init &rArr; LT768_DMA_24bit_Linear &rArr; Start_SFI_DMA &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt911_Scan
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Outside_Font_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Outside_Font_String
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Internal_Font_String
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Width
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Window_Start_XY
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Width
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Start_Address
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X2
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X2
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_XY
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_WH
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
</UL>

<P><STRONG><a name="[8b]"></a>Blinking_Time_Frames</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lt768.o(i.Blinking_Time_Frames))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Blinking_Time_Frames &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Text_cursor_Init
</UL>

<P><STRONG><a name="[8c]"></a>Button_ON_OFF</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, lt768_demo.o(i.Button_ON_OFF))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Button_ON_OFF &rArr; LT768_BTE_Memory_Copy &rArr; BTE_Window_Size &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircle_Fill
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Demo
</UL>

<P><STRONG><a name="[8e]"></a>CGRAM_Start_address</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lt768.o(i.CGRAM_Start_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CGRAM_Start_address &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Outside_Font_Init
</UL>

<P><STRONG><a name="[8f]"></a>CGROM_Select_Internal_CGROM</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.CGROM_Select_Internal_CGROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CGROM_Select_Internal_CGROM &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Text
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Outside_Font_String
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Internal_Font_String
</UL>

<P><STRONG><a name="[90]"></a>CTP_io_Init</STRONG> (Thumb, 854 bytes, Stack size 48 bytes, gt911.o(i.CTP_io_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CTP_io_Init &rArr; LT_I2C_Read_NByte &rArr; LT768_I2CM_transmit_Progress &rArr; LCD_DataRead &rArr; SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT_I2C_Read_NByte
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_GPIO_A_7_0
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_A_In_Out
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_GPIO_A_7_0
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_transmit_Progress
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Write_With_Start
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Write
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Transmit_Data
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Stop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Receiver_Data
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Read_With_Nack
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Read_With_Ack
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Clock_Prescale
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Check_Slave_ACK
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Bus_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>Canvas_Image_Start_address</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lt768.o(i.Canvas_Image_Start_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Canvas_Image_Start_address &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUp_picture
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GUI
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waveform_Demo
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Demo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_temperature
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Total
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Panel
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Gears
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer_Show
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer4_Turn
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer3_Turn
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer2_Turn
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer1_Turn
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Demo
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Outside_Font
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_To_Sdram
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Table
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Rectangle
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Polygon
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Pillar_Demo
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Line_Curve
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Circle_Ellipse
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Levetop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Demo
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Demo
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Icon
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cartoon_Show
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_Control
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_slide_frame_buffer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_BTE
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_Alpha_Blending
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Outside_Font_GB2312_48_72
</UL>

<P><STRONG><a name="[5b]"></a>Canvas_image_width</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lt768.o(i.Canvas_image_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Canvas_image_width &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUp_picture
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GUI
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waveform_Demo
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Demo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_temperature
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Total
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Panel
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Gears
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer_Show
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer4_Turn
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer3_Turn
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer2_Turn
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer1_Turn
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Demo
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Outside_Font
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_To_Sdram
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Table
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Rectangle
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Polygon
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Pillar_Demo
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Line_Curve
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Circle_Ellipse
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Levetop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Demo
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Demo
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Icon
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cartoon_Show
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_Control
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_slide_frame_buffer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_BTE
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_Alpha_Blending
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Outside_Font_GB2312_48_72
</UL>

<P><STRONG><a name="[ae]"></a>Cartoon_Show</STRONG> (Thumb, 456 bytes, Stack size 64 bytes, lt768_demo.o(i.Cartoon_Show))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = Cartoon_Show &rArr; Screen_delay_Count &rArr; Scan_Screen_Delay_1ms &rArr; gt911_Scan &rArr; TP_read_XY &rArr; LT_I2C_Read_NByte &rArr; LT768_I2CM_transmit_Progress &rArr; LCD_DataRead &rArr; SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_delay_Count
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Window_Start_XY
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Width
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Start_Address
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_XY
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_WH
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
</UL>

<P><STRONG><a name="[af]"></a>Check_2D_Busy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lt768.o(i.Check_2D_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Check_2D_Busy &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StatusRead
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLine1
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Outside_Font_String
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawTriangle_Fill
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawTriangle
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawRightUpCurve_Fill
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawRightUpCurve
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawRightDownCurve_Fill
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawRightDownCurve
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawQuadrilateral_Fill
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawQuadrilateral
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawPentagon_Fill
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawPentagon
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLine
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLeftUpCurve_Fill
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLeftUpCurve
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLeftDownCurve_Fill
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLeftDownCurve
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawEllipse_Fill
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawEllipse
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircle_Fill
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircleSquare_Fill
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircleSquare
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircle
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_String
</UL>

<P><STRONG><a name="[78]"></a>Check_BTE_Busy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lt768.o(i.Check_BTE_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Check_BTE_Busy &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StatusRead
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_Chroma_key_8
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_8
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Solid_Fill
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Alpha_Blending
</UL>

<P><STRONG><a name="[b1]"></a>Check_Busy_Draw</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lt768.o(i.Check_Busy_Draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StatusRead
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawQuadrilateral_Fill
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawQuadrilateral
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawPentagon_Fill
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawPentagon
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Triangle_Fill
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Triangle
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Square_Fill
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Square
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Right_Up_Curve_Fill
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Right_Up_Curve
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Right_Down_Curve_Fill
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Right_Down_Curve
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Line
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Left_Up_Curve_Fill
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Left_Up_Curve
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Left_Down_Curve_Fill
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Left_Down_Curve
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Circle_or_Ellipse_Fill
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Circle_or_Ellipse
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Circle_Square_Fill
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Circle_Square
</UL>

<P><STRONG><a name="[b2]"></a>Check_Busy_SFI_DMA</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Check_Busy_SFI_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Check_Busy_SFI_DMA &rArr; LCD_DataRead &rArr; SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Linear
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
</UL>

<P><STRONG><a name="[b3]"></a>Check_Mem_WR_FIFO_not_Full</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lt768.o(i.Check_Mem_WR_FIFO_not_Full))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Check_Mem_WR_FIFO_not_Full &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StatusRead
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Outside_Font_String
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_String
</UL>

<P><STRONG><a name="[b4]"></a>Check_SDRAM_Ready</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lt768.o(i.Check_SDRAM_Ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Check_SDRAM_Ready &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StatusRead
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SDRAM_initail
</UL>

<P><STRONG><a name="[b5]"></a>Circle_Center_XY</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lt768.o(i.Circle_Center_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Circle_Center_XY &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircle_Fill
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircle
</UL>

<P><STRONG><a name="[b6]"></a>Circle_Radius_R</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lt768.o(i.Circle_Radius_R))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Circle_Radius_R &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircle_Fill
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircle
</UL>

<P><STRONG><a name="[b7]"></a>Circle_Square_Radius_RxRy</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lt768.o(i.Circle_Square_Radius_RxRy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Circle_Square_Radius_RxRy &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircleSquare_Fill
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircleSquare
</UL>

<P><STRONG><a name="[b8]"></a>Clear_Icon</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, lt768_demo.o(i.Clear_Icon))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Clear_Icon &rArr; LT768_DrawSquare_Fill &rArr; Start_Square_Fill &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Panel
</UL>

<P><STRONG><a name="[b9]"></a>Clear_Vsync_Interrupt_Flag</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Clear_Vsync_Interrupt_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Clear_Vsync_Interrupt_Flag &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waveform_Demo
</UL>

<P><STRONG><a name="[ba]"></a>Controller_Demo</STRONG> (Thumb, 512 bytes, Stack size 80 bytes, lt768_demo.o(i.Controller_Demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = Controller_Demo &rArr; Pointer_Show &rArr; TEST_DoubleTriangle &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Text
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Temperature
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Progress2
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Progress1
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_delay_Count
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer_Show
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_ON_OFF
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircle
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Window_Start_XY
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Width
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Start_Address
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_XY
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_WH
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
</UL>

<P><STRONG><a name="[c1]"></a>Copy_AllPicture_To_Display</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, lt768_demo.o(i.Copy_AllPicture_To_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Copy_AllPicture_To_Display &rArr; Copy_Picture_To_Display &rArr; LT768_BTE_Memory_Copy &rArr; BTE_Window_Size &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_Picture_To_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Panel
</UL>

<P><STRONG><a name="[c2]"></a>Copy_Picture_To_Display</STRONG> (Thumb, 128 bytes, Stack size 64 bytes, lt768_demo.o(i.Copy_Picture_To_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Copy_Picture_To_Display &rArr; LT768_BTE_Memory_Copy &rArr; BTE_Window_Size &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Icon
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_AllPicture_To_Display
</UL>

<P><STRONG><a name="[c3]"></a>DE_High_Active</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.DE_High_Active))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DE_High_Active &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[c4]"></a>DMA_Demo</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, lt768_demo.o(i.DMA_Demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = DMA_Demo &rArr; Screen_delay_Count &rArr; Scan_Screen_Delay_1ms &rArr; gt911_Scan &rArr; TP_read_XY &rArr; LT_I2C_Read_NByte &rArr; LT768_I2CM_transmit_Progress &rArr; LCD_DataRead &rArr; SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_delay_Count
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Window_Start_XY
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Width
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Start_Address
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_XY
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_WH
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
</UL>

<P><STRONG><a name="[c5]"></a>Disable_Font_Alignment</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Disable_Font_Alignment))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Disable_Font_Alignment &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Outside_Font_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[c6]"></a>Disable_Graphic_Cursor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Disable_Graphic_Cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Disable_Graphic_Cursor &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Disable_Graphic_Cursor
</UL>

<P><STRONG><a name="[c7]"></a>Disable_PIP1</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Disable_PIP1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Disable_PIP1 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Set_DisWindowPos
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PIP_Init
</UL>

<P><STRONG><a name="[c8]"></a>Disable_PIP2</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Disable_PIP2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Disable_PIP2 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Set_DisWindowPos
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PIP_Init
</UL>

<P><STRONG><a name="[c9]"></a>Disable_Text_Cursor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Disable_Text_Cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Disable_Text_Cursor &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Disable_Text_Cursor
</UL>

<P><STRONG><a name="[ca]"></a>Disable_Text_Cursor_Blinking</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Disable_Text_Cursor_Blinking))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Disable_Text_Cursor_Blinking &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Text_cursor_Init
</UL>

<P><STRONG><a name="[cb]"></a>Display_Levetop</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lt768_demo.o(i.Display_Levetop))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Display_Levetop &rArr; Waiting_ClickScreen &rArr; gt911_Scan &rArr; TP_read_XY &rArr; LT_I2C_Read_NByte &rArr; LT768_I2CM_transmit_Progress &rArr; LCD_DataRead &rArr; SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waiting_ClickScreen
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Window_Start_XY
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Width
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Start_Address
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_XY
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_WH
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
</UL>

<P><STRONG><a name="[cd]"></a>Display_ON</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Display_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Display_ON &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>Draw_Circle_Ellipse</STRONG> (Thumb, 712 bytes, Stack size 40 bytes, lt768_demo.o(i.Draw_Circle_Ellipse))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Draw_Circle_Ellipse &rArr; Screen_delay_Count &rArr; Scan_Screen_Delay_1ms &rArr; gt911_Scan &rArr; TP_read_XY &rArr; LT_I2C_Read_NByte &rArr; LT768_I2CM_transmit_Progress &rArr; LCD_DataRead &rArr; SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_delay_Count
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawEllipse_Fill
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawEllipse
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircle_Fill
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircle
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Window_Start_XY
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Width
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Start_Address
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_XY
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_WH
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
</UL>

<P><STRONG><a name="[d1]"></a>Draw_Line_Curve</STRONG> (Thumb, 1016 bytes, Stack size 56 bytes, lt768_demo.o(i.Draw_Line_Curve))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Draw_Line_Curve &rArr; LT768_DrawLine_Width &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_delay_Count
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SelectDrawCurve_Fill
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SelectDrawCurve
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLine_Width
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Window_Start_XY
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Width
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Start_Address
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_XY
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_WH
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
</UL>

<P><STRONG><a name="[d5]"></a>Draw_Pillar_Demo</STRONG> (Thumb, 2084 bytes, Stack size 96 bytes, lt768_demo.o(i.Draw_Pillar_Demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = Draw_Pillar_Demo &rArr; LT768_DrawQuadrangular &rArr; LT768_DrawQuadrilateral_Fill &rArr; Triangle_Point3_XY &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Key_delay
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_delay_Count
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawQuadrangular
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCylinder
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Solid_Fill
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Window_Start_XY
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Width
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Start_Address
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_XY
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_WH
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
</UL>

<P><STRONG><a name="[d8]"></a>Draw_Polygon</STRONG> (Thumb, 1274 bytes, Stack size 88 bytes, lt768_demo.o(i.Draw_Polygon))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = Draw_Polygon &rArr; Screen_delay_Count &rArr; Scan_Screen_Delay_1ms &rArr; gt911_Scan &rArr; TP_read_XY &rArr; LT_I2C_Read_NByte &rArr; LT768_I2CM_transmit_Progress &rArr; LCD_DataRead &rArr; SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_delay_Count
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawTriangle_Fill
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawTriangle
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawPentagon_Fill
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawPentagon
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Window_Start_XY
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Width
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Start_Address
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_XY
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_WH
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
</UL>

<P><STRONG><a name="[dd]"></a>Draw_Rectangle</STRONG> (Thumb, 922 bytes, Stack size 48 bytes, lt768_demo.o(i.Draw_Rectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Draw_Rectangle &rArr; Screen_delay_Count &rArr; Scan_Screen_Delay_1ms &rArr; gt911_Scan &rArr; TP_read_XY &rArr; LT_I2C_Read_NByte &rArr; LT768_I2CM_transmit_Progress &rArr; LCD_DataRead &rArr; SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs1
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_delay_Count
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircleSquare_Fill
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircleSquare
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Window_Start_XY
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Width
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Start_Address
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_XY
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_WH
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
</UL>

<P><STRONG><a name="[e2]"></a>Draw_Table</STRONG> (Thumb, 1330 bytes, Stack size 72 bytes, lt768_demo.o(i.Draw_Table))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Draw_Table &rArr; LT768_MakeTable &rArr; LT768_DrawLine_Width &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_delay_Count
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Outside_Font_String
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_MakeTable
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Window_Start_XY
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Width
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Start_Address
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Background_select_Transparency
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_XY
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_WH
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
</UL>

<P><STRONG><a name="[e5]"></a>Drawing_SineWaveDate</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lt768_demo.o(i.Drawing_SineWaveDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Drawing_SineWaveDate &rArr; LT768_DrawLine1 &rArr; Start_Line &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLine1
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waveform_Demo
</UL>

<P><STRONG><a name="[e7]"></a>Drawing_TriangleWave</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lt768_demo.o(i.Drawing_TriangleWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Drawing_TriangleWave &rArr; LT768_DrawLine1 &rArr; Start_Line &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLine1
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waveform_Demo
</UL>

<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gt911.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[e9]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[9c]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
</UL>

<P><STRONG><a name="[ea]"></a>Ellipse_Center_XY</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lt768.o(i.Ellipse_Center_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Ellipse_Center_XY &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawRightUpCurve_Fill
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawRightUpCurve
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawRightDownCurve_Fill
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawRightDownCurve
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawPentagon_Fill
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawPentagon
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLeftUpCurve_Fill
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLeftUpCurve
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLeftDownCurve_Fill
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLeftDownCurve
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawEllipse_Fill
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawEllipse
</UL>

<P><STRONG><a name="[eb]"></a>Ellipse_Radius_RxRy</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lt768.o(i.Ellipse_Radius_RxRy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Ellipse_Radius_RxRy &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawRightUpCurve_Fill
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawRightUpCurve
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawRightDownCurve_Fill
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawRightDownCurve
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawQuadrilateral_Fill
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawQuadrilateral
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawPentagon_Fill
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawPentagon
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLeftUpCurve_Fill
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLeftUpCurve
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLeftDownCurve_Fill
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLeftDownCurve
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawEllipse_Fill
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawEllipse
</UL>

<P><STRONG><a name="[ec]"></a>Enable_Font_Alignment</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Enable_Font_Alignment))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Enable_Font_Alignment &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Outside_Font_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[ed]"></a>Enable_Graphic_Cursor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Enable_Graphic_Cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Enable_Graphic_Cursor &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Graphic_cursor_Init
</UL>

<P><STRONG><a name="[ee]"></a>Enable_PIP1</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Enable_PIP1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Enable_PIP1 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Set_DisWindowPos
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PIP_Init
</UL>

<P><STRONG><a name="[ef]"></a>Enable_PIP2</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Enable_PIP2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Enable_PIP2 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Set_DisWindowPos
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PIP_Init
</UL>

<P><STRONG><a name="[f0]"></a>Enable_SFlash_SPI</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Enable_SFlash_SPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Enable_SFlash_SPI &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Linear
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
</UL>

<P><STRONG><a name="[f1]"></a>Enable_Text_Cursor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Enable_Text_Cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Enable_Text_Cursor &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Text_cursor_Init
</UL>

<P><STRONG><a name="[f2]"></a>Enable_Text_Cursor_Blinking</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Enable_Text_Cursor_Blinking))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Enable_Text_Cursor_Blinking &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Text_cursor_Init
</UL>

<P><STRONG><a name="[f3]"></a>Enable_Vsync_Interrupt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Enable_Vsync_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Enable_Vsync_Interrupt &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waveform_Demo
</UL>

<P><STRONG><a name="[f4]"></a>Flash_To_Sdram</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, lt768_demo.o(i.Flash_To_Sdram))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Flash_To_Sdram &rArr; LT768_DMA_24bit_Block &rArr; Goto_Pixel_XY &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Panel
</UL>

<P><STRONG><a name="[f5]"></a>Font_0_degree</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Font_0_degree))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Font_0_degree &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
</UL>

<P><STRONG><a name="[f6]"></a>Font_Background_select_Color</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Font_Background_select_Color))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Font_Background_select_Color &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Outside_Font_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[e3]"></a>Font_Background_select_Transparency</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Font_Background_select_Transparency))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Font_Background_select_Transparency &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Table
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Outside_Font_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[f7]"></a>Font_Height_X1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Font_Height_X1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Font_Height_X1 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GUI
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Outside_Font
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Outside_Font_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[86]"></a>Font_Height_X2</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Font_Height_X2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Font_Height_X2 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Outside_Font
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_Control
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Outside_Font_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[f8]"></a>Font_Height_X3</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Font_Height_X3))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Font_Height_X3 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Outside_Font
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Outside_Font_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[f9]"></a>Font_Height_X4</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Font_Height_X4))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Font_Height_X4 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Outside_Font
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Outside_Font_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[fa]"></a>Font_Select_12x24_24x24</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Font_Select_12x24_24x24))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Font_Select_12x24_24x24 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Outside_Font_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[fb]"></a>Font_Select_16x32_32x32</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Font_Select_16x32_32x32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Font_Select_16x32_32x32 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Outside_Font_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[fc]"></a>Font_Select_8x16_16x16</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Font_Select_8x16_16x16))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Font_Select_8x16_16x16 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Text
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Outside_Font_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[fd]"></a>Font_Select_UserDefine_Mode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Font_Select_UserDefine_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Font_Select_UserDefine_Mode &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Outside_Font_String
</UL>

<P><STRONG><a name="[fe]"></a>Font_Width_X1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Font_Width_X1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Font_Width_X1 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GUI
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Outside_Font
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Outside_Font_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[85]"></a>Font_Width_X2</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Font_Width_X2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Font_Width_X2 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Outside_Font
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_Control
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Outside_Font_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[ff]"></a>Font_Width_X3</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Font_Width_X3))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Font_Width_X3 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Outside_Font
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Outside_Font_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[100]"></a>Font_Width_X4</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Font_Width_X4))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Font_Width_X4 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Outside_Font
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Outside_Font_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[7f]"></a>Foreground_color_65k</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lt768.o(i.Foreground_color_65k))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Foreground_color_65k &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waveform_Demo
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Text
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drawing_TriangleWave
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drawing_SineWaveDate
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Outside_Font_String
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Internal_Font_String
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawTriangle_Fill
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawTriangle
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawRightUpCurve_Fill
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawRightUpCurve
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawRightDownCurve_Fill
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawRightDownCurve
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawQuadrilateral_Fill
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawQuadrilateral
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawPentagon_Fill
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawPentagon
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLine
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLeftUpCurve_Fill
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLeftUpCurve
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLeftDownCurve_Fill
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLeftDownCurve
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawEllipse_Fill
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawEllipse
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircle_Fill
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircleSquare_Fill
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircleSquare
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircle
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_Chroma_key_8
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_8
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Solid_Fill
</UL>

<P><STRONG><a name="[9b]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
</UL>

<P><STRONG><a name="[92]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_HW_Reset
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init_8
</UL>

<P><STRONG><a name="[99]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
</UL>

<P><STRONG><a name="[95]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadOutputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
</UL>

<P><STRONG><a name="[94]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_HW_Reset
</UL>

<P><STRONG><a name="[98]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_HW_Reset
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init_8
</UL>

<P><STRONG><a name="[101]"></a>GUI_Init</STRONG> (Thumb, 1044 bytes, Stack size 16 bytes, lt768_demo.o(i.GUI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = GUI_Init &rArr; LT768_Print_Outside_Font_String &rArr; Goto_Text_XY &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Outside_Font_String
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Width
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
</UL>

<P><STRONG><a name="[102]"></a>Goto_Pixel_XY</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lt768.o(i.Goto_Pixel_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Goto_Pixel_XY &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
</UL>

<P><STRONG><a name="[103]"></a>Goto_Text_XY</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lt768.o(i.Goto_Text_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Goto_Text_XY &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Text
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Outside_Font_String
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Internal_Font_String
</UL>

<P><STRONG><a name="[104]"></a>Graphic_Cursor_XY</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lt768.o(i.Graphic_Cursor_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Graphic_Cursor_XY &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Set_Graphic_cursor_Pos
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Graphic_cursor_Init
</UL>

<P><STRONG><a name="[105]"></a>Graphic_Mode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Graphic_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Graphic_Mode &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Outside_Font_String
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Graphic_cursor_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_String
</UL>

<P><STRONG><a name="[106]"></a>HSYNC_Low_Active</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.HSYNC_Low_Active))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HSYNC_Low_Active &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[107]"></a>Host_Bus_16bit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Host_Bus_16bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Host_Bus_16bit &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[a0]"></a>INTX_ENABLE</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(i.INTX_ENABLE))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
</UL>

<P><STRONG><a name="[190]"></a>Judge_Pos</STRONG> (Thumb, 896 bytes, Stack size 0 bytes, lt768_demo.o(i.Judge_Pos))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
</UL>

<P><STRONG><a name="[79]"></a>LCD_CmdWrite</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, if_port.o(i.LCD_CmdWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_CmdWrite &rArr; SPI_CmdWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CmdWrite_8
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_Dual_Mode0
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ON
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Check_Temp
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Outside_Font_String
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PLL_Initial
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Graphic_cursor_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawQuadrilateral_Fill
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawQuadrilateral
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawPentagon_Fill
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawPentagon
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_GPIO_A_7_0
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_Low_Active
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSCAN_T_to_B
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_Point3_XY
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_Point2_XY
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_Point1_XY
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Mode
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Cursor_H_V
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_16bit
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_PWM1
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Triangle_Fill
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Triangle
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Square_Fill
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Square
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_SFI_DMA
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Right_Up_Curve_Fill
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Right_Up_Curve
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Right_Down_Curve_Fill
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Right_Down_Curve
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_PWM1
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Line
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Left_Up_Curve_Fill
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Left_Up_Curve
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Left_Down_Curve_Fill
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Left_Down_Curve
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Circle_or_Ellipse_Fill
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Circle_or_Ellipse
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Circle_Square_Fill
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Circle_Square
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Square_Start_XY
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Square_End_XY
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_String
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Timer1_Count_Buffer
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Timer1_Compare_Buffer
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_PWM_Prescaler_1_to_256
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_A_In_Out
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_DMA_Mode
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_1
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_0
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_8
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_4
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_2
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_1
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PIP2_Parameter
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PIP1_Window_16bpp
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PIP1_Parameter
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Graphic_Cursor_4
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Graphic_Cursor_3
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Graphic_Cursor_2
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Graphic_Cursor_1
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Clock_Period
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Transfer_Width_Height
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Transfer_Number
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Source_Width
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Source_Start_Address
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Destination_Upper_Left_Corner
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Destination_Start_Address
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Interrupt_status
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_GPIO_A_7_0
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_16b_16bpp
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDATA_Set_RGB
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCLK_Falling
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_XY_Mode
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Select_SDRAM
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Select_Graphic_Cursor_RAM
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Linear_Mode
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_8bpp_Mode
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_16bpp_Mode
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemWrite_Left_Right_Top_Down
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Start_XY
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_End_XY
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_transmit_Progress
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Write_With_Start
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Write
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Transmit_Data
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Stop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Receiver_Data
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Read_With_Nack
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Read_With_Ack
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Clock_Prescale
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Check_Slave_ACK
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Bus_Busy
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Vertical_Non_Display
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VSYNC_Start_Position
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VSYNC_Pulse_Width
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Horizontal_Non_Display
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HorizontalWidth_VerticalHeight
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HSYNC_Start_Position
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HSYNC_Pulse_Width
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Bus_16bit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSYNC_Low_Active
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic_Mode
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X4
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X3
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X2
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X1
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_UserDefine_Mode
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_8x16_16x16
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_16x32_32x32
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_12x24_24x24
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X4
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X3
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X2
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X1
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Background_select_Transparency
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Background_select_Color
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_0_degree
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Vsync_Interrupt
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Text_Cursor_Blinking
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Text_Cursor
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SFlash_SPI
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_PIP2
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_PIP1
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Graphic_Cursor
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Font_Alignment
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Radius_RxRy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Center_XY
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Text_Cursor_Blinking
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Text_Cursor
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_PIP2
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_PIP1
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Graphic_Cursor
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Font_Alignment
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_High_Active
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Vsync_Interrupt_Flag
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Square_Radius_RxRy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Radius_R
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Center_XY
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_SFI_DMA
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGROM_Select_Internal_CGROM
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGRAM_Start_address
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blinking_Time_Frames
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background_color_65k
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S1_Color_16bpp
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S0_Color_8bpp
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S0_Color_16bpp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_ROP_Code
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Operation_Code
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Enable
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Destination_Color_16bpp
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Alpha_Blending_Effect
</UL>

<P><STRONG><a name="[7b]"></a>LCD_DataRead</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, if_port.o(i.LCD_DataRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_DataRead &rArr; SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataRead_8
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_Dual_Mode0
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ON
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Check_Temp
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_Low_Active
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSCAN_T_to_B
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Mode
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_16bit
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_PWM1
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_SFI_DMA
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_PWM1
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_DMA_Mode
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_1
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_0
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_8
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_4
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_2
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_1
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PIP2_Parameter
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PIP1_Window_16bpp
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PIP1_Parameter
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Graphic_Cursor_4
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Graphic_Cursor_3
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Graphic_Cursor_2
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Graphic_Cursor_1
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Interrupt_status
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_GPIO_A_7_0
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_16b_16bpp
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDATA_Set_RGB
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCLK_Falling
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_XY_Mode
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Select_SDRAM
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Select_Graphic_Cursor_RAM
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Linear_Mode
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_8bpp_Mode
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_16bpp_Mode
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemWrite_Left_Right_Top_Down
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_transmit_Progress
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Receiver_Data
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Enable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Check_Slave_ACK
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Bus_Busy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Bus_16bit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSYNC_Low_Active
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic_Mode
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X4
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X3
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X2
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X1
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_UserDefine_Mode
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_8x16_16x16
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_16x32_32x32
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_12x24_24x24
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X4
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X3
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X2
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X1
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Background_select_Transparency
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Background_select_Color
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_0_degree
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Vsync_Interrupt
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Text_Cursor_Blinking
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Text_Cursor
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SFlash_SPI
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_PIP2
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_PIP1
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Graphic_Cursor
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Font_Alignment
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Text_Cursor_Blinking
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Text_Cursor
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_PIP2
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_PIP1
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Graphic_Cursor
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Font_Alignment
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_High_Active
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Vsync_Interrupt_Flag
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_SFI_DMA
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGROM_Select_Internal_CGROM
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S1_Color_16bpp
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S0_Color_8bpp
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S0_Color_16bpp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_ROP_Code
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Operation_Code
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Enable
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Destination_Color_16bpp
</UL>

<P><STRONG><a name="[7a]"></a>LCD_DataWrite</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, if_port.o(i.LCD_DataWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataWrite_8
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_Dual_Mode0
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ON
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Check_Temp
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Outside_Font_String
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PLL_Initial
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Graphic_cursor_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawQuadrilateral_Fill
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawQuadrilateral
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawPentagon_Fill
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawPentagon
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_GPIO_A_7_0
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_Low_Active
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSCAN_T_to_B
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_Point3_XY
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_Point2_XY
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_Point1_XY
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Mode
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Cursor_H_V
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_16bit
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_PWM1
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Triangle_Fill
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Triangle
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Square_Fill
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Square
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_SFI_DMA
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Right_Up_Curve_Fill
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Right_Up_Curve
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Right_Down_Curve_Fill
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Right_Down_Curve
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_PWM1
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Line
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Left_Up_Curve_Fill
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Left_Up_Curve
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Left_Down_Curve_Fill
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Left_Down_Curve
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Circle_or_Ellipse_Fill
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Circle_or_Ellipse
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Circle_Square_Fill
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Circle_Square
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Square_Start_XY
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Square_End_XY
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_String
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Timer1_Count_Buffer
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Timer1_Compare_Buffer
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_PWM_Prescaler_1_to_256
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_A_In_Out
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_DMA_Mode
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_1
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_0
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_8
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_4
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_2
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_1
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PIP2_Parameter
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PIP1_Window_16bpp
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PIP1_Parameter
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Graphic_Cursor_4
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Graphic_Cursor_3
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Graphic_Cursor_2
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Graphic_Cursor_1
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Clock_Period
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Transfer_Width_Height
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Transfer_Number
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Source_Width
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Source_Start_Address
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Destination_Upper_Left_Corner
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Destination_Start_Address
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_16b_16bpp
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDATA_Set_RGB
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCLK_Falling
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_XY_Mode
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Select_SDRAM
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Select_Graphic_Cursor_RAM
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Linear_Mode
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_8bpp_Mode
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_16bpp_Mode
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemWrite_Left_Right_Top_Down
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Start_XY
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_End_XY
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Write_With_Start
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Write
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Transmit_Data
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Stop
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Read_With_Nack
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Read_With_Ack
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Clock_Prescale
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Vertical_Non_Display
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VSYNC_Start_Position
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VSYNC_Pulse_Width
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Horizontal_Non_Display
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HorizontalWidth_VerticalHeight
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HSYNC_Start_Position
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HSYNC_Pulse_Width
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Bus_16bit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSYNC_Low_Active
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic_Mode
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X4
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X3
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X2
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X1
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_UserDefine_Mode
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_8x16_16x16
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_16x32_32x32
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_12x24_24x24
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X4
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X3
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X2
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X1
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Background_select_Transparency
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Background_select_Color
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_0_degree
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Vsync_Interrupt
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Text_Cursor_Blinking
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Text_Cursor
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SFlash_SPI
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_PIP2
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_PIP1
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Graphic_Cursor
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Font_Alignment
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Radius_RxRy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Center_XY
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Text_Cursor_Blinking
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Text_Cursor
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_PIP2
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_PIP1
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Graphic_Cursor
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Font_Alignment
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_High_Active
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Vsync_Interrupt_Flag
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Square_Radius_RxRy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Radius_R
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Center_XY
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGROM_Select_Internal_CGROM
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGRAM_Start_address
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blinking_Time_Frames
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background_color_65k
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S1_Color_16bpp
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S0_Color_8bpp
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S0_Color_16bpp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_ROP_Code
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Operation_Code
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Enable
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Destination_Color_16bpp
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Alpha_Blending_Effect
</UL>

<P><STRONG><a name="[10b]"></a>LCD_HSYNC_Pulse_Width</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lt768.o(i.LCD_HSYNC_Pulse_Width))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_HSYNC_Pulse_Width &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[10c]"></a>LCD_HSYNC_Start_Position</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lt768.o(i.LCD_HSYNC_Start_Position))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_HSYNC_Start_Position &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[10d]"></a>LCD_HorizontalWidth_VerticalHeight</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, lt768.o(i.LCD_HorizontalWidth_VerticalHeight))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_HorizontalWidth_VerticalHeight &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[10e]"></a>LCD_Horizontal_Non_Display</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lt768.o(i.LCD_Horizontal_Non_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_Horizontal_Non_Display &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[53]"></a>LCD_RegisterWrite</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lt768.o(i.LCD_RegisterWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SDRAM_initail
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Graphic_Cursor_Color_2
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Graphic_Cursor_Color_1
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Window_Width_Height
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Window_Image_Start_XY
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Image_Width
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Image_Start_Address
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Display_Start_XY
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Window_Start_XY
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Width
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Start_Address
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic_Cursor_XY
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goto_Text_XY
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goto_Pixel_XY
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Window_Size
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S1_Window_Start_XY
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S1_Memory_Start_Address
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S1_Image_Width
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S0_Window_Start_XY
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S0_Memory_Start_Address
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S0_Image_Width
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Destination_Window_Start_XY
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Destination_Memory_Start_Address
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Destination_Image_Width
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_XY
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_WH
</UL>

<P><STRONG><a name="[b0]"></a>LCD_StatusRead</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, if_port.o(i.LCD_StatusRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StatusRead_8
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Check_Temp
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SDRAM_Ready
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Mem_WR_FIFO_not_Full
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Draw
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_BTE_Busy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>

<P><STRONG><a name="[110]"></a>LCD_VSYNC_Pulse_Width</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lt768.o(i.LCD_VSYNC_Pulse_Width))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_VSYNC_Pulse_Width &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[111]"></a>LCD_VSYNC_Start_Position</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lt768.o(i.LCD_VSYNC_Start_Position))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_VSYNC_Start_Position &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[112]"></a>LCD_Vertical_Non_Display</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lt768.o(i.LCD_Vertical_Non_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_Vertical_Non_Display &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[62]"></a>LT768_BTE_Memory_Copy</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, lt768_lib.o(i.LT768_BTE_Memory_Copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LT768_BTE_Memory_Copy &rArr; BTE_Window_Size &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_BTE_Busy
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Window_Size
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S1_Window_Start_XY
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S1_Memory_Start_Address
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S1_Image_Width
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S1_Color_16bpp
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S0_Window_Start_XY
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S0_Memory_Start_Address
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S0_Image_Width
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S0_Color_16bpp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_ROP_Code
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Operation_Code
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Enable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Destination_Window_Start_XY
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Destination_Memory_Start_Address
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Destination_Image_Width
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Destination_Color_16bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GUI
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_temperature
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Total
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Gears
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer_Show
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer4_Turn
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer3_Turn
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer2_Turn
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer1_Turn
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Demo
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Table
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_Picture_To_Display
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Demo
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cartoon_Show
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_ON_OFF
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_BTE
</UL>

<P><STRONG><a name="[113]"></a>LT768_BTE_Memory_Copy_ColorExpansion_8</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, lt768_lib.o(i.LT768_BTE_Memory_Copy_ColorExpansion_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LT768_BTE_Memory_Copy_ColorExpansion_8 &rArr; BTE_Window_Size &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_BTE_Busy
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background_color_65k
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Window_Size
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S0_Window_Start_XY
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S0_Memory_Start_Address
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S0_Image_Width
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S0_Color_8bpp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_ROP_Code
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Operation_Code
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Enable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Destination_Window_Start_XY
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Destination_Memory_Start_Address
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Destination_Image_Width
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Destination_Color_16bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Outside_Font_GB2312_48_72
</UL>

<P><STRONG><a name="[114]"></a>LT768_BTE_Memory_Copy_ColorExpansion_Chroma_key_8</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, lt768_lib.o(i.LT768_BTE_Memory_Copy_ColorExpansion_Chroma_key_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LT768_BTE_Memory_Copy_ColorExpansion_Chroma_key_8 &rArr; BTE_Window_Size &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_BTE_Busy
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Window_Size
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S0_Window_Start_XY
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S0_Memory_Start_Address
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S0_Image_Width
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_S0_Color_8bpp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_ROP_Code
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Operation_Code
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Enable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Destination_Window_Start_XY
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Destination_Memory_Start_Address
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Destination_Image_Width
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Destination_Color_16bpp
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Outside_Font_GB2312_48_72
</UL>

<P><STRONG><a name="[5d]"></a>LT768_DMA_24bit_Block</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, lt768_lib.o(i.LT768_DMA_24bit_Block))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LT768_DMA_24bit_Block &rArr; Goto_Pixel_XY &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_SFI_DMA
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_DMA_Mode
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_1
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_0
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Clock_Period
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Transfer_Width_Height
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Source_Width
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Source_Start_Address
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Destination_Upper_Left_Corner
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goto_Pixel_XY
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SFlash_SPI
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_SFI_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUp_picture
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Demo
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Panel
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Demo
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_To_Sdram
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Table
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Levetop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Demo
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Demo
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cartoon_Show
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_slide_frame_buffer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_BTE
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_Alpha_Blending
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Outside_Font_GB2312_48_72
</UL>

<P><STRONG><a name="[11e]"></a>LT768_DMA_24bit_Linear</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lt768_lib.o(i.LT768_DMA_24bit_Linear))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LT768_DMA_24bit_Linear &rArr; Start_SFI_DMA &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_SFI_DMA
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_DMA_Mode
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_1
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_0
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Clock_Period
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Transfer_Number
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Source_Start_Address
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFI_DMA_Destination_Start_Address
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_XY_Mode
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Linear_Mode
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SFlash_SPI
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_SFI_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Outside_Font_Init
</UL>

<P><STRONG><a name="[123]"></a>LT768_Disable_Graphic_Cursor</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lt768_lib.o(i.LT768_Disable_Graphic_Cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LT768_Disable_Graphic_Cursor &rArr; Disable_Graphic_Cursor &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Graphic_Cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Demo
</UL>

<P><STRONG><a name="[124]"></a>LT768_Disable_Text_Cursor</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lt768_lib.o(i.LT768_Disable_Text_Cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LT768_Disable_Text_Cursor &rArr; Disable_Text_Cursor &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Text_Cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Demo
</UL>

<P><STRONG><a name="[be]"></a>LT768_DrawCircle</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lt768_lib.o(i.LT768_DrawCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LT768_DrawCircle &rArr; Start_Circle_or_Ellipse &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Circle_or_Ellipse
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Radius_R
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Center_XY
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Circle_Ellipse
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Demo
</UL>

<P><STRONG><a name="[e0]"></a>LT768_DrawCircleSquare</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lt768_lib.o(i.LT768_DrawCircleSquare))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LT768_DrawCircleSquare &rArr; Start_Circle_Square &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Circle_Square
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Square_Start_XY
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Square_End_XY
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Square_Radius_RxRy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Rectangle
</UL>

<P><STRONG><a name="[e1]"></a>LT768_DrawCircleSquare_Fill</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lt768_lib.o(i.LT768_DrawCircleSquare_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LT768_DrawCircleSquare_Fill &rArr; Start_Circle_Square_Fill &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Circle_Square_Fill
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Square_Start_XY
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Square_End_XY
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Square_Radius_RxRy
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Rectangle
</UL>

<P><STRONG><a name="[8d]"></a>LT768_DrawCircle_Fill</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lt768_lib.o(i.LT768_DrawCircle_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LT768_DrawCircle_Fill &rArr; Start_Circle_or_Ellipse_Fill &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Circle_or_Ellipse_Fill
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Radius_R
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Circle_Center_XY
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_DoubleTriangle
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Circle_Ellipse
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Button_ON_OFF
</UL>

<P><STRONG><a name="[d6]"></a>LT768_DrawCylinder</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, lt768_lib.o(i.LT768_DrawCylinder))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LT768_DrawCylinder &rArr; LT768_DrawSquare_Fill &rArr; Start_Square_Fill &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLine
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawEllipse_Fill
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawEllipse
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Pillar_Demo
</UL>

<P><STRONG><a name="[cf]"></a>LT768_DrawEllipse</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lt768_lib.o(i.LT768_DrawEllipse))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LT768_DrawEllipse &rArr; Start_Circle_or_Ellipse &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Circle_or_Ellipse
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Radius_RxRy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Center_XY
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Circle_Ellipse
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCylinder
</UL>

<P><STRONG><a name="[d0]"></a>LT768_DrawEllipse_Fill</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lt768_lib.o(i.LT768_DrawEllipse_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LT768_DrawEllipse_Fill &rArr; Start_Circle_or_Ellipse_Fill &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Circle_or_Ellipse_Fill
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Radius_RxRy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Center_XY
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Circle_Ellipse
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCylinder
</UL>

<P><STRONG><a name="[12b]"></a>LT768_DrawLeftDownCurve</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lt768_lib.o(i.LT768_DrawLeftDownCurve))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LT768_DrawLeftDownCurve &rArr; Start_Left_Down_Curve &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Left_Down_Curve
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Radius_RxRy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Center_XY
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SelectDrawCurve
</UL>

<P><STRONG><a name="[12d]"></a>LT768_DrawLeftDownCurve_Fill</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lt768_lib.o(i.LT768_DrawLeftDownCurve_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LT768_DrawLeftDownCurve_Fill &rArr; Start_Left_Down_Curve_Fill &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Left_Down_Curve_Fill
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Radius_RxRy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Center_XY
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SelectDrawCurve_Fill
</UL>

<P><STRONG><a name="[12f]"></a>LT768_DrawLeftUpCurve</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lt768_lib.o(i.LT768_DrawLeftUpCurve))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LT768_DrawLeftUpCurve &rArr; Start_Left_Up_Curve &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Left_Up_Curve
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Radius_RxRy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Center_XY
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SelectDrawCurve
</UL>

<P><STRONG><a name="[131]"></a>LT768_DrawLeftUpCurve_Fill</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lt768_lib.o(i.LT768_DrawLeftUpCurve_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LT768_DrawLeftUpCurve_Fill &rArr; Start_Left_Up_Curve_Fill &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Left_Up_Curve_Fill
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Radius_RxRy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Center_XY
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SelectDrawCurve_Fill
</UL>

<P><STRONG><a name="[61]"></a>LT768_DrawLine</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lt768_lib.o(i.LT768_DrawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LT768_DrawLine &rArr; Start_Line &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Line
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Start_XY
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_End_XY
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_BTE
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLine_Width
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCylinder
</UL>

<P><STRONG><a name="[e6]"></a>LT768_DrawLine1</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lt768_demo.o(i.LT768_DrawLine1))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LT768_DrawLine1 &rArr; Start_Line &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Line
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_Start_XY
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Line_End_XY
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waveform_Demo
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drawing_TriangleWave
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drawing_SineWaveDate
</UL>

<P><STRONG><a name="[d2]"></a>LT768_DrawLine_Width</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, lt768_lib.o(i.LT768_DrawLine_Width))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LT768_DrawLine_Width &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Line_Curve
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_MakeTable
</UL>

<P><STRONG><a name="[d9]"></a>LT768_DrawPentagon</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, lt768_lib.o(i.LT768_DrawPentagon))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LT768_DrawPentagon &rArr; Triangle_Point3_XY &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_Point3_XY
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_Point2_XY
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_Point1_XY
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Radius_RxRy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Center_XY
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Draw
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Polygon
</UL>

<P><STRONG><a name="[da]"></a>LT768_DrawPentagon_Fill</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, lt768_lib.o(i.LT768_DrawPentagon_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LT768_DrawPentagon_Fill &rArr; Triangle_Point3_XY &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_Point3_XY
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_Point2_XY
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_Point1_XY
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Radius_RxRy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Center_XY
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Draw
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Polygon
</UL>

<P><STRONG><a name="[d7]"></a>LT768_DrawQuadrangular</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, lt768_lib.o(i.LT768_DrawQuadrangular))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = LT768_DrawQuadrangular &rArr; LT768_DrawQuadrilateral_Fill &rArr; Triangle_Point3_XY &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawQuadrilateral_Fill
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawQuadrilateral
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Pillar_Demo
</UL>

<P><STRONG><a name="[13c]"></a>LT768_DrawQuadrilateral</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, lt768_lib.o(i.LT768_DrawQuadrilateral))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LT768_DrawQuadrilateral &rArr; Triangle_Point3_XY &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_Point3_XY
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_Point2_XY
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_Point1_XY
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Radius_RxRy
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Draw
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawQuadrangular
</UL>

<P><STRONG><a name="[13b]"></a>LT768_DrawQuadrilateral_Fill</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, lt768_lib.o(i.LT768_DrawQuadrilateral_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LT768_DrawQuadrilateral_Fill &rArr; Triangle_Point3_XY &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_Point3_XY
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_Point2_XY
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_Point1_XY
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Radius_RxRy
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Draw
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawQuadrangular
</UL>

<P><STRONG><a name="[13d]"></a>LT768_DrawRightDownCurve</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lt768_lib.o(i.LT768_DrawRightDownCurve))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LT768_DrawRightDownCurve &rArr; Start_Right_Down_Curve &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Right_Down_Curve
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Radius_RxRy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Center_XY
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SelectDrawCurve
</UL>

<P><STRONG><a name="[13f]"></a>LT768_DrawRightDownCurve_Fill</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lt768_lib.o(i.LT768_DrawRightDownCurve_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LT768_DrawRightDownCurve_Fill &rArr; Start_Right_Down_Curve_Fill &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Right_Down_Curve_Fill
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Radius_RxRy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Center_XY
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SelectDrawCurve_Fill
</UL>

<P><STRONG><a name="[141]"></a>LT768_DrawRightUpCurve</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lt768_lib.o(i.LT768_DrawRightUpCurve))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LT768_DrawRightUpCurve &rArr; Start_Right_Up_Curve &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Right_Up_Curve
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Radius_RxRy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Center_XY
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SelectDrawCurve
</UL>

<P><STRONG><a name="[143]"></a>LT768_DrawRightUpCurve_Fill</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lt768_lib.o(i.LT768_DrawRightUpCurve_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LT768_DrawRightUpCurve_Fill &rArr; Start_Right_Up_Curve_Fill &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Right_Up_Curve_Fill
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Radius_RxRy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ellipse_Center_XY
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SelectDrawCurve_Fill
</UL>

<P><STRONG><a name="[de]"></a>LT768_DrawSquare</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lt768_lib.o(i.LT768_DrawSquare))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LT768_DrawSquare &rArr; Start_Square &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Square
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Square_Start_XY
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Square_End_XY
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Rectangle
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawQuadrangular
</UL>

<P><STRONG><a name="[5c]"></a>LT768_DrawSquare_Fill</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lt768_lib.o(i.LT768_DrawSquare_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LT768_DrawSquare_Fill &rArr; Start_Square_Fill &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Square_Fill
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Square_Start_XY
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Square_End_XY
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUp_picture
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GUI
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waveform_Demo
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Demo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_temperature
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Total
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Temperature
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Progress2
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Progress1
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Gears
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Demo
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Outside_Font
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Table
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Rectangle
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Polygon
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Pillar_Demo
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Line_Curve
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Circle_Ellipse
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Levetop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Demo
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Demo
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Icon
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cartoon_Show
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_Control
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_slide_frame_buffer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_BTE
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_Alpha_Blending
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_MakeTable
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Width
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawQuadrangular
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCylinder
</UL>

<P><STRONG><a name="[82]"></a>LT768_DrawSquare_Width</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, lt768_lib.o(i.LT768_DrawSquare_Width))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LT768_DrawSquare_Width &rArr; LT768_DrawSquare_Fill &rArr; Start_Square_Fill &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GUI
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waveform_Demo
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_Control
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_MakeTable
</UL>

<P><STRONG><a name="[db]"></a>LT768_DrawTriangle</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lt768_lib.o(i.LT768_DrawTriangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LT768_DrawTriangle &rArr; Triangle_Point3_XY &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_Point3_XY
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_Point2_XY
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_Point1_XY
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Triangle
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Polygon
</UL>

<P><STRONG><a name="[dc]"></a>LT768_DrawTriangle_Fill</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lt768_lib.o(i.LT768_DrawTriangle_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LT768_DrawTriangle_Fill &rArr; Triangle_Point3_XY &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_Point3_XY
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_Point2_XY
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Triangle_Point1_XY
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Triangle_Fill
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_DoubleTriangle
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Polygon
</UL>

<P><STRONG><a name="[149]"></a>LT768_Graphic_cursor_Init</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, lt768_lib.o(i.LT768_Graphic_cursor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LT768_Graphic_cursor_Init &rArr; Graphic_Cursor_XY &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Graphic_Cursor_Color_2
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Graphic_Cursor_Color_1
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Graphic_Cursor_4
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Graphic_Cursor_3
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Graphic_Cursor_2
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Graphic_Cursor_1
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Select_SDRAM
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Select_Graphic_Cursor_RAM
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic_Mode
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic_Cursor_XY
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Graphic_Cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Demo
</UL>

<P><STRONG><a name="[152]"></a>LT768_HW_Reset</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lt768_lib.o(i.LT768_HW_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LT768_HW_Reset &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Check_Temp
</UL>

<P><STRONG><a name="[aa]"></a>LT768_I2CM_Bus_Busy</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.LT768_I2CM_Bus_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LT768_I2CM_Bus_Busy &rArr; LCD_DataRead &rArr; SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_read_XY
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT_I2C_Read_NByte
</UL>

<P><STRONG><a name="[a6]"></a>LT768_I2CM_Check_Slave_ACK</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.LT768_I2CM_Check_Slave_ACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LT768_I2CM_Check_Slave_ACK &rArr; LCD_DataRead &rArr; SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_read_XY
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT_I2C_Read_NByte
</UL>

<P><STRONG><a name="[a1]"></a>LT768_I2CM_Clock_Prescale</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.LT768_I2CM_Clock_Prescale))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LT768_I2CM_Clock_Prescale &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
</UL>

<P><STRONG><a name="[a2]"></a>LT768_I2CM_Enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.LT768_I2CM_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LT768_I2CM_Enable &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
</UL>

<P><STRONG><a name="[ac]"></a>LT768_I2CM_Read_With_Ack</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lt768.o(i.LT768_I2CM_Read_With_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LT768_I2CM_Read_With_Ack &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT_I2C_Read_NByte
</UL>

<P><STRONG><a name="[ab]"></a>LT768_I2CM_Read_With_Nack</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lt768.o(i.LT768_I2CM_Read_With_Nack))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LT768_I2CM_Read_With_Nack &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT_I2C_Read_NByte
</UL>

<P><STRONG><a name="[ad]"></a>LT768_I2CM_Receiver_Data</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lt768.o(i.LT768_I2CM_Receiver_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LT768_I2CM_Receiver_Data &rArr; LCD_DataRead &rArr; SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT_I2C_Read_NByte
</UL>

<P><STRONG><a name="[a9]"></a>LT768_I2CM_Stop</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lt768.o(i.LT768_I2CM_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LT768_I2CM_Stop &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_read_XY
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT_I2C_Read_NByte
</UL>

<P><STRONG><a name="[a4]"></a>LT768_I2CM_Transmit_Data</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lt768.o(i.LT768_I2CM_Transmit_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LT768_I2CM_Transmit_Data &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_read_XY
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT_I2C_Read_NByte
</UL>

<P><STRONG><a name="[a8]"></a>LT768_I2CM_Write</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lt768.o(i.LT768_I2CM_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LT768_I2CM_Write &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_read_XY
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT_I2C_Read_NByte
</UL>

<P><STRONG><a name="[a5]"></a>LT768_I2CM_Write_With_Start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lt768.o(i.LT768_I2CM_Write_With_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LT768_I2CM_Write_With_Start &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_read_XY
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT_I2C_Read_NByte
</UL>

<P><STRONG><a name="[a7]"></a>LT768_I2CM_transmit_Progress</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.LT768_I2CM_transmit_Progress))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LT768_I2CM_transmit_Progress &rArr; LCD_DataRead &rArr; SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_read_XY
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT_I2C_Read_NByte
</UL>

<P><STRONG><a name="[153]"></a>LT768_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lt768_lib.o(i.LT768_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LT768_Init &rArr; LT768_initial &rArr; LT768_PLL_Initial &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Check_Temp
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_initial
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_HW_Reset
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StatusRead
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>LT768_MakeTable</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, lt768_lib.o(i.LT768_MakeTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LT768_MakeTable &rArr; LT768_DrawLine_Width &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Width
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLine_Width
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Table
</UL>

<P><STRONG><a name="[156]"></a>LT768_PIP_Init</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, lt768_lib.o(i.LT768_PIP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LT768_PIP_Init &rArr; PIP_Window_Width_Height &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PIP2_Parameter
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PIP1_Window_16bpp
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PIP1_Parameter
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Window_Width_Height
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Window_Image_Start_XY
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Image_Width
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Image_Start_Address
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Display_Start_XY
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_PIP2
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_PIP1
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_PIP2
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_PIP1
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Demo
</UL>

<P><STRONG><a name="[15f]"></a>LT768_PLL_Initial</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, lt768_lib.o(i.LT768_PLL_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LT768_PLL_Initial &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_initial
</UL>

<P><STRONG><a name="[8a]"></a>LT768_PWM1_Init</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lt768_lib.o(i.LT768_PWM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LT768_PWM1_Init &rArr; Stop_PWM1 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_PWM1
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_PWM1
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Timer1_Count_Buffer
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Timer1_Compare_Buffer
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_PWM_Prescaler_1_to_256
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_8
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_4
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_2
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_1
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_Control
</UL>

<P><STRONG><a name="[88]"></a>LT768_Print_Internal_Font_String</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lt768_lib.o(i.LT768_Print_Internal_Font_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LT768_Print_Internal_Font_String &rArr; Goto_Text_XY &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Mode
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_String
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goto_Text_XY
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGROM_Select_Internal_CGROM
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background_color_65k
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waveform_Demo
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Demo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_temperature
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Total
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer1_Turn
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_Control
</UL>

<P><STRONG><a name="[16c]"></a>LT768_Print_Outside_Font_GB2312_48_72</STRONG> (Thumb, 460 bytes, Stack size 112 bytes, lt768_lib.o(i.LT768_Print_Outside_Font_GB2312_48_72))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = LT768_Print_Outside_Font_GB2312_48_72 &rArr; LT768_DMA_24bit_Block &rArr; Goto_Pixel_XY &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_Chroma_key_8
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy_ColorExpansion_8
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_8bpp_Mode
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_16bpp_Mode
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Outside_Font
</UL>

<P><STRONG><a name="[84]"></a>LT768_Print_Outside_Font_String</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, lt768_lib.o(i.LT768_Print_Outside_Font_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = LT768_Print_Outside_Font_String &rArr; Goto_Text_XY &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Mode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic_Mode
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goto_Text_XY
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_UserDefine_Mode
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Mem_WR_FIFO_not_Full
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGROM_Select_Internal_CGROM
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background_color_65k
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GUI
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waveform_Demo
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Outside_Font
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Table
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_Control
</UL>

<P><STRONG><a name="[16f]"></a>LT768_SDRAM_initail</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lt768_lib.o(i.LT768_SDRAM_initail))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LT768_SDRAM_initail &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SDRAM_Ready
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_initial
</UL>

<P><STRONG><a name="[d3]"></a>LT768_SelectDrawCurve</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lt768_lib.o(i.LT768_SelectDrawCurve))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LT768_SelectDrawCurve &rArr; LT768_DrawRightUpCurve &rArr; Start_Right_Up_Curve &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawRightUpCurve
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawRightDownCurve
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLeftUpCurve
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLeftDownCurve
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Line_Curve
</UL>

<P><STRONG><a name="[d4]"></a>LT768_SelectDrawCurve_Fill</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lt768_lib.o(i.LT768_SelectDrawCurve_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LT768_SelectDrawCurve_Fill &rArr; LT768_DrawRightUpCurve_Fill &rArr; Start_Right_Up_Curve_Fill &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawRightUpCurve_Fill
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawRightDownCurve_Fill
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLeftUpCurve_Fill
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLeftDownCurve_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Line_Curve
</UL>

<P><STRONG><a name="[170]"></a>LT768_Select_Internal_Font_Init</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lt768_lib.o(i.LT768_Select_Internal_Font_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LT768_Select_Internal_Font_Init &rArr; Font_Width_X4 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X4
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X3
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X2
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X1
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_8x16_16x16
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_16x32_32x32
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_12x24_24x24
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X4
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X3
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X2
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X1
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Background_select_Transparency
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Background_select_Color
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Font_Alignment
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Font_Alignment
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Demo
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Panel
</UL>

<P><STRONG><a name="[83]"></a>LT768_Select_Outside_Font_Init</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, lt768_lib.o(i.LT768_Select_Outside_Font_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = LT768_Select_Outside_Font_Init &rArr; LT768_DMA_24bit_Linear &rArr; Start_SFI_DMA &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Linear
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X4
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X3
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X2
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X1
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_8x16_16x16
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_16x32_32x32
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_12x24_24x24
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X4
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X3
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X2
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X1
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Background_select_Transparency
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Background_select_Color
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Font_Alignment
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Font_Alignment
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGRAM_Start_address
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GUI
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waveform_Demo
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Outside_Font
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_Control
</UL>

<P><STRONG><a name="[171]"></a>LT768_Set_DisWindowPos</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lt768_lib.o(i.LT768_Set_DisWindowPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LT768_Set_DisWindowPos &rArr; PIP_Display_Start_XY &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PIP2_Parameter
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PIP1_Parameter
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Display_Start_XY
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_PIP2
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_PIP1
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_PIP2
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_PIP1
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Demo
</UL>

<P><STRONG><a name="[172]"></a>LT768_Set_Graphic_cursor_Pos</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lt768_lib.o(i.LT768_Set_Graphic_cursor_Pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LT768_Set_Graphic_cursor_Pos &rArr; Graphic_Cursor_XY &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Graphic_Cursor_4
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Graphic_Cursor_3
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Graphic_Cursor_2
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Graphic_Cursor_1
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic_Cursor_XY
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Demo
</UL>

<P><STRONG><a name="[173]"></a>LT768_Text_cursor_Init</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lt768_lib.o(i.LT768_Text_cursor_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LT768_Text_cursor_Init &rArr; Text_Cursor_H_V &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Cursor_H_V
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Text_Cursor_Blinking
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Text_Cursor
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Text_Cursor_Blinking
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blinking_Time_Frames
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Demo
</UL>

<P><STRONG><a name="[155]"></a>LT768_initial</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lt768_lib.o(i.LT768_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LT768_initial &rArr; LT768_PLL_Initial &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SDRAM_initail
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PLL_Initial
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Init
</UL>

<P><STRONG><a name="[a3]"></a>LT_I2C_Read_NByte</STRONG> (Thumb, 460 bytes, Stack size 32 bytes, gt911.o(i.LT_I2C_Read_NByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LT_I2C_Read_NByte &rArr; LT768_I2CM_transmit_Progress &rArr; LCD_DataRead &rArr; SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_transmit_Progress
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Write_With_Start
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Write
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Transmit_Data
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Stop
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Receiver_Data
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Read_With_Nack
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Read_With_Ack
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Check_Slave_ACK
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Bus_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_read_XY
</UL>

<P><STRONG><a name="[134]"></a>Line_End_XY</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lt768.o(i.Line_End_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Line_End_XY &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLine1
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLine
</UL>

<P><STRONG><a name="[133]"></a>Line_Start_XY</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lt768.o(i.Line_Start_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Line_Start_XY &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLine1
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLine
</UL>

<P><STRONG><a name="[176]"></a>Load_SineWaveDate</STRONG> (Thumb, 196 bytes, Stack size 80 bytes, lt768_demo.o(i.Load_SineWaveDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Load_SineWaveDate &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waveform_Demo
</UL>

<P><STRONG><a name="[1aa]"></a>Load_TriangleWaveDate</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lt768_demo.o(i.Load_TriangleWaveDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Load_TriangleWaveDate
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waveform_Demo
</UL>

<P><STRONG><a name="[178]"></a>Main_GUI</STRONG> (Thumb, 1596 bytes, Stack size 48 bytes, lt768_demo.o(i.Main_GUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Main_GUI &rArr; LT768_Select_Outside_Font_Init &rArr; LT768_DMA_24bit_Linear &rArr; Start_SFI_DMA &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Outside_Font_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Outside_Font_String
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Width
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Window_Start_XY
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Width
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Start_Address
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X1
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X1
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_XY
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_WH
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>Main_Image_Start_Address</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lt768.o(i.Main_Image_Start_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Main_Image_Start_Address &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUp_picture
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GUI
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waveform_Demo
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Demo
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Panel
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Demo
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Outside_Font
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Table
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Rectangle
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Polygon
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Pillar_Demo
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Line_Curve
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Circle_Ellipse
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Levetop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Demo
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Demo
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cartoon_Show
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_Control
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_slide_frame_buffer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_BTE
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_Alpha_Blending
</UL>

<P><STRONG><a name="[58]"></a>Main_Image_Width</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lt768.o(i.Main_Image_Width))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Main_Image_Width &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUp_picture
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GUI
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waveform_Demo
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Demo
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Panel
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Demo
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Outside_Font
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Table
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Rectangle
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Polygon
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Pillar_Demo
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Line_Curve
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Circle_Ellipse
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Levetop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Demo
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Demo
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cartoon_Show
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_Control
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_slide_frame_buffer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_BTE
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_Alpha_Blending
</UL>

<P><STRONG><a name="[59]"></a>Main_Window_Start_XY</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lt768.o(i.Main_Window_Start_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Main_Window_Start_XY &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUp_picture
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GUI
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waveform_Demo
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Demo
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Panel
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Demo
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Outside_Font
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Table
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Rectangle
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Polygon
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Pillar_Demo
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Line_Curve
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Circle_Ellipse
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Levetop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Demo
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Demo
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cartoon_Show
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_Control
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_slide_frame_buffer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_BTE
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_Alpha_Blending
</UL>

<P><STRONG><a name="[179]"></a>MemWrite_Left_Right_Top_Down</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.MemWrite_Left_Right_Top_Down))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MemWrite_Left_Right_Top_Down &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[16e]"></a>Memory_16bpp_Mode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Memory_16bpp_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Memory_16bpp_Mode &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Outside_Font_GB2312_48_72
</UL>

<P><STRONG><a name="[16d]"></a>Memory_8bpp_Mode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Memory_8bpp_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Memory_8bpp_Mode &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Outside_Font_GB2312_48_72
</UL>

<P><STRONG><a name="[11f]"></a>Memory_Linear_Mode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Memory_Linear_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Memory_Linear_Mode &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Linear
</UL>

<P><STRONG><a name="[14a]"></a>Memory_Select_Graphic_Cursor_RAM</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Memory_Select_Graphic_Cursor_RAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Memory_Select_Graphic_Cursor_RAM &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Graphic_cursor_Init
</UL>

<P><STRONG><a name="[14f]"></a>Memory_Select_SDRAM</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Memory_Select_SDRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Memory_Select_SDRAM &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Graphic_cursor_Init
</UL>

<P><STRONG><a name="[122]"></a>Memory_XY_Mode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Memory_XY_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Memory_XY_Mode &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Linear
</UL>

<P><STRONG><a name="[1ab]"></a>Move_WaveDate</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, lt768_demo.o(i.Move_WaveDate))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waveform_Demo
</UL>

<P><STRONG><a name="[9e]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
</UL>

<P><STRONG><a name="[9d]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
</UL>

<P><STRONG><a name="[9f]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
</UL>

<P><STRONG><a name="[17a]"></a>Outside_Font</STRONG> (Thumb, 922 bytes, Stack size 48 bytes, lt768_demo.o(i.Outside_Font))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = Outside_Font &rArr; LT768_Print_Outside_Font_GB2312_48_72 &rArr; LT768_DMA_24bit_Block &rArr; Goto_Pixel_XY &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_delay_Count
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Outside_Font_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Outside_Font_String
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Outside_Font_GB2312_48_72
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Window_Start_XY
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Width
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Start_Address
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X4
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X3
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X2
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X1
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X4
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X3
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X2
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X1
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_XY
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_WH
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
</UL>

<P><STRONG><a name="[17b]"></a>PCLK_Falling</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.PCLK_Falling))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PCLK_Falling &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[17c]"></a>PDATA_Set_RGB</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.PDATA_Set_RGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PDATA_Set_RGB &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[17d]"></a>PIP_Demo</STRONG> (Thumb, 1672 bytes, Stack size 88 bytes, lt768_demo.o(i.PIP_Demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = PIP_Demo &rArr; Screen_delay_Count &rArr; Scan_Screen_Delay_1ms &rArr; gt911_Scan &rArr; TP_read_XY &rArr; LT_I2C_Read_NByte &rArr; LT768_I2CM_transmit_Progress &rArr; LCD_DataRead &rArr; SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_delay_Count
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Set_DisWindowPos
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PIP_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTE_Alpha_Blending
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Window_Start_XY
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Width
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Start_Address
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_XY
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_WH
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
</UL>

<P><STRONG><a name="[15a]"></a>PIP_Display_Start_XY</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lt768.o(i.PIP_Display_Start_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PIP_Display_Start_XY &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Set_DisWindowPos
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PIP_Init
</UL>

<P><STRONG><a name="[15b]"></a>PIP_Image_Start_Address</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lt768.o(i.PIP_Image_Start_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PIP_Image_Start_Address &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PIP_Init
</UL>

<P><STRONG><a name="[15c]"></a>PIP_Image_Width</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lt768.o(i.PIP_Image_Width))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PIP_Image_Width &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PIP_Init
</UL>

<P><STRONG><a name="[15d]"></a>PIP_Window_Image_Start_XY</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lt768.o(i.PIP_Window_Image_Start_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PIP_Window_Image_Start_XY &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PIP_Init
</UL>

<P><STRONG><a name="[15e]"></a>PIP_Window_Width_Height</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lt768.o(i.PIP_Window_Width_Height))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PIP_Window_Width_Height &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PIP_Init
</UL>

<P><STRONG><a name="[17e]"></a>Parallel_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, if_port.o(i.Parallel_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Parallel_Init &rArr; SPI2_Init_8 &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init_8
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[180]"></a>Pointer1_Turn</STRONG> (Thumb, 304 bytes, Stack size 72 bytes, lt768_demo.o(i.Pointer1_Turn))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = Pointer1_Turn &rArr; TEST_DoubleTriangle &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_DoubleTriangle
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Internal_Font_String
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Pointer1_Turn
</UL>

<P><STRONG><a name="[184]"></a>Pointer2_Turn</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, lt768_demo.o(i.Pointer2_Turn))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Pointer2_Turn &rArr; TEST_DoubleTriangle &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_DoubleTriangle
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Pointer2_Turn
</UL>

<P><STRONG><a name="[185]"></a>Pointer3_Turn</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, lt768_demo.o(i.Pointer3_Turn))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Pointer3_Turn &rArr; TEST_DoubleTriangle &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_DoubleTriangle
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Pointer3_Turn
</UL>

<P><STRONG><a name="[186]"></a>Pointer4_Turn</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, lt768_demo.o(i.Pointer4_Turn))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Pointer4_Turn &rArr; TEST_DoubleTriangle &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_DoubleTriangle
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Pointer4_Turn
</UL>

<P><STRONG><a name="[c0]"></a>Pointer_Show</STRONG> (Thumb, 258 bytes, Stack size 64 bytes, lt768_demo.o(i.Pointer_Show))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Pointer_Show &rArr; TEST_DoubleTriangle &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_DoubleTriangle
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Demo
</UL>

<P><STRONG><a name="[189]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init_8
</UL>

<P><STRONG><a name="[91]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_HW_Reset
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init_8
</UL>

<P><STRONG><a name="[1a9]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[187]"></a>RGB_16b_16bpp</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.RGB_16b_16bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RGB_16b_16bpp &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[9a]"></a>Read_GPIO_A_7_0</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lt768.o(i.Read_GPIO_A_7_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Read_GPIO_A_7_0 &rArr; LCD_DataRead &rArr; SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
</UL>

<P><STRONG><a name="[188]"></a>Read_Interrupt_status</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lt768.o(i.Read_Interrupt_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Read_Interrupt_status &rArr; LCD_DataRead &rArr; SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waveform_Demo
</UL>

<P><STRONG><a name="[120]"></a>SFI_DMA_Destination_Start_Address</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lt768.o(i.SFI_DMA_Destination_Start_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SFI_DMA_Destination_Start_Address &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Linear
</UL>

<P><STRONG><a name="[119]"></a>SFI_DMA_Destination_Upper_Left_Corner</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lt768.o(i.SFI_DMA_Destination_Upper_Left_Corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SFI_DMA_Destination_Upper_Left_Corner &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
</UL>

<P><STRONG><a name="[11c]"></a>SFI_DMA_Source_Start_Address</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lt768.o(i.SFI_DMA_Source_Start_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SFI_DMA_Source_Start_Address &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Linear
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
</UL>

<P><STRONG><a name="[11b]"></a>SFI_DMA_Source_Width</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.SFI_DMA_Source_Width))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SFI_DMA_Source_Width &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
</UL>

<P><STRONG><a name="[121]"></a>SFI_DMA_Transfer_Number</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lt768.o(i.SFI_DMA_Transfer_Number))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SFI_DMA_Transfer_Number &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Linear
</UL>

<P><STRONG><a name="[11a]"></a>SFI_DMA_Transfer_Width_Height</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lt768.o(i.SFI_DMA_Transfer_Width_Height))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SFI_DMA_Transfer_Width_Height &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
</UL>

<P><STRONG><a name="[17f]"></a>SPI2_Init_8</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, if_port.o(i.SPI2_Init_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI2_Init_8 &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parallel_Init
</UL>

<P><STRONG><a name="[18c]"></a>SPI2_ReadWriteByte</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, if_port.o(i.SPI2_ReadWriteByte))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StatusRead_8
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataWrite_8
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataRead_8
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CmdWrite_8
</UL>

<P><STRONG><a name="[118]"></a>SPI_Clock_Period</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lt768.o(i.SPI_Clock_Period))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_Clock_Period &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Linear
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
</UL>

<P><STRONG><a name="[18b]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init_8
</UL>

<P><STRONG><a name="[108]"></a>SPI_CmdWrite_8</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, if_port.o(i.SPI_CmdWrite_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPI_CmdWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>

<P><STRONG><a name="[109]"></a>SPI_DataRead_8</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, if_port.o(i.SPI_DataRead_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
</UL>

<P><STRONG><a name="[10a]"></a>SPI_DataWrite_8</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, if_port.o(i.SPI_DataWrite_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
</UL>

<P><STRONG><a name="[18a]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Init_8
</UL>

<P><STRONG><a name="[10f]"></a>SPI_StatusRead_8</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, if_port.o(i.SPI_StatusRead_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StatusRead
</UL>

<P><STRONG><a name="[18d]"></a>Scan_Key</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, key.o(i.Scan_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Scan_Key
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Key_delay
</UL>

<P><STRONG><a name="[67]"></a>Scan_Key_delay</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, key.o(i.Scan_Key_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Scan_Key_delay &rArr; Scan_Key
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Key
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Pillar_Demo
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_slide_frame_buffer
</UL>

<P><STRONG><a name="[18e]"></a>Scan_Screen_Delay_1ms</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lt768_demo.o(i.Scan_Screen_Delay_1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Scan_Screen_Delay_1ms &rArr; gt911_Scan &rArr; TP_read_XY &rArr; LT_I2C_Read_NByte &rArr; LT768_I2CM_transmit_Progress &rArr; LCD_DataRead &rArr; SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt911_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_delay_Count
</UL>

<P><STRONG><a name="[5f]"></a>Screen_delay_Count</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lt768_demo.o(i.Screen_delay_Count))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = Screen_delay_Count &rArr; Scan_Screen_Delay_1ms &rArr; gt911_Scan &rArr; TP_read_XY &rArr; LT_I2C_Read_NByte &rArr; LT768_I2CM_transmit_Progress &rArr; LCD_DataRead &rArr; SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Screen_Delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Demo
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Panel
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Demo
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Outside_Font
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Table
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Rectangle
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Polygon
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Pillar_Demo
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Line_Curve
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Circle_Ellipse
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Demo
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Demo
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cartoon_Show
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_slide_frame_buffer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_BTE
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_Alpha_Blending
</UL>

<P><STRONG><a name="[18f]"></a>Select_Function</STRONG> (Thumb, 1886 bytes, Stack size 72 bytes, lt768_demo.o(i.Select_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = Select_Function &rArr; Controller_Demo &rArr; Pointer_Show &rArr; TEST_DoubleTriangle &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waveform_Demo
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Demo
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Panel
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Demo
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Outside_Font
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Pos
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Table
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Rectangle
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Polygon
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Pillar_Demo
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Line_Curve
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Circle_Ellipse
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Levetop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Demo
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Demo
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cartoon_Show
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_Control
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_slide_frame_buffer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_BTE
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_Alpha_Blending
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt911_Scan
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Outside_Font_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Outside_Font_String
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Width
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Disable_Text_Cursor
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Disable_Graphic_Cursor
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSCAN_T_to_B
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Window_Start_XY
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Width
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Start_Address
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_0_degree
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_PIP2
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_PIP1
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_XY
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_WH
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14b]"></a>Select_Graphic_Cursor_1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Select_Graphic_Cursor_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Select_Graphic_Cursor_1 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Set_Graphic_cursor_Pos
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Graphic_cursor_Init
</UL>

<P><STRONG><a name="[14c]"></a>Select_Graphic_Cursor_2</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Select_Graphic_Cursor_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Select_Graphic_Cursor_2 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Set_Graphic_cursor_Pos
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Graphic_cursor_Init
</UL>

<P><STRONG><a name="[14d]"></a>Select_Graphic_Cursor_3</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Select_Graphic_Cursor_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Select_Graphic_Cursor_3 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Set_Graphic_cursor_Pos
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Graphic_cursor_Init
</UL>

<P><STRONG><a name="[14e]"></a>Select_Graphic_Cursor_4</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Select_Graphic_Cursor_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Select_Graphic_Cursor_4 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Set_Graphic_cursor_Pos
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Graphic_cursor_Init
</UL>

<P><STRONG><a name="[56]"></a>Select_Main_Window_16bpp</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Select_Main_Window_16bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Select_Main_Window_16bpp &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUp_picture
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GUI
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waveform_Demo
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Demo
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Panel
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Demo
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Outside_Font
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Table
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Rectangle
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Polygon
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Pillar_Demo
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Line_Curve
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Circle_Ellipse
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Levetop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Demo
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Demo
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cartoon_Show
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_Control
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_slide_frame_buffer
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_BTE
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_Alpha_Blending
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[158]"></a>Select_PIP1_Parameter</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Select_PIP1_Parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Select_PIP1_Parameter &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Set_DisWindowPos
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PIP_Init
</UL>

<P><STRONG><a name="[157]"></a>Select_PIP1_Window_16bpp</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Select_PIP1_Window_16bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Select_PIP1_Window_16bpp &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PIP_Init
</UL>

<P><STRONG><a name="[159]"></a>Select_PIP2_Parameter</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Select_PIP2_Parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Select_PIP2_Parameter &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Set_DisWindowPos
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PIP_Init
</UL>

<P><STRONG><a name="[160]"></a>Select_PWM1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Select_PWM1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Select_PWM1 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[162]"></a>Select_PWM1_Clock_Divided_By_1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Select_PWM1_Clock_Divided_By_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Select_PWM1_Clock_Divided_By_1 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[163]"></a>Select_PWM1_Clock_Divided_By_2</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Select_PWM1_Clock_Divided_By_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Select_PWM1_Clock_Divided_By_2 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[164]"></a>Select_PWM1_Clock_Divided_By_4</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Select_PWM1_Clock_Divided_By_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Select_PWM1_Clock_Divided_By_4 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[165]"></a>Select_PWM1_Clock_Divided_By_8</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Select_PWM1_Clock_Divided_By_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Select_PWM1_Clock_Divided_By_8 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[115]"></a>Select_SFI_0</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Select_SFI_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Select_SFI_0 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Linear
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
</UL>

<P><STRONG><a name="[116]"></a>Select_SFI_1</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Select_SFI_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Select_SFI_1 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Linear
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
</UL>

<P><STRONG><a name="[117]"></a>Select_SFI_DMA_Mode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Select_SFI_DMA_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Select_SFI_DMA_Mode &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Linear
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
</UL>

<P><STRONG><a name="[195]"></a>Select_SFI_Dual_Mode0</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Select_SFI_Dual_Mode0))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Select_SFI_Dual_Mode0 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>Set_GPIO_A_In_Out</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lt768.o(i.Set_GPIO_A_In_Out))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Set_GPIO_A_In_Out &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
</UL>

<P><STRONG><a name="[150]"></a>Set_Graphic_Cursor_Color_1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lt768.o(i.Set_Graphic_Cursor_Color_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Set_Graphic_Cursor_Color_1 &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Graphic_cursor_Init
</UL>

<P><STRONG><a name="[151]"></a>Set_Graphic_Cursor_Color_2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lt768.o(i.Set_Graphic_Cursor_Color_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Set_Graphic_Cursor_Color_2 &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Graphic_cursor_Init
</UL>

<P><STRONG><a name="[175]"></a>Set_LCD_Panel</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, lt768_lib.o(i.Set_LCD_Panel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Set_LCD_Panel &rArr; LCD_Vertical_Non_Display &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_Low_Active
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSCAN_T_to_B
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_16bit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_16b_16bpp
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDATA_Set_RGB
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCLK_Falling
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_XY_Mode
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Select_SDRAM
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_16bpp_Mode
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemWrite_Left_Right_Top_Down
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Vertical_Non_Display
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VSYNC_Start_Position
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VSYNC_Pulse_Width
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Horizontal_Non_Display
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HorizontalWidth_VerticalHeight
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HSYNC_Start_Position
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HSYNC_Pulse_Width
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Bus_16bit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSYNC_Low_Active
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic_Mode
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_High_Active
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_initial
</UL>

<P><STRONG><a name="[161]"></a>Set_PWM_Prescaler_1_to_256</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lt768.o(i.Set_PWM_Prescaler_1_to_256))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Set_PWM_Prescaler_1_to_256 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[167]"></a>Set_Timer1_Compare_Buffer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Set_Timer1_Compare_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Set_Timer1_Compare_Buffer &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[166]"></a>Set_Timer1_Count_Buffer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.Set_Timer1_Count_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Set_Timer1_Count_Buffer &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[19a]"></a>Show_Gears</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, lt768_demo.o(i.Show_Gears))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = Show_Gears &rArr; LT768_BTE_Memory_Copy &rArr; BTE_Window_Size &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Panel
</UL>

<P><STRONG><a name="[19b]"></a>Show_Icon</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, lt768_demo.o(i.Show_Icon))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = Show_Icon &rArr; Copy_Picture_To_Display &rArr; LT768_BTE_Memory_Copy &rArr; BTE_Window_Size &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_Picture_To_Display
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Panel
</UL>

<P><STRONG><a name="[193]"></a>Show_Panel</STRONG> (Thumb, 418 bytes, Stack size 56 bytes, lt768_demo.o(i.Show_Panel))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = Show_Panel &rArr; Show_Pointer1_Turn &rArr; Pointer1_Turn &rArr; TEST_DoubleTriangle &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_temperature
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Total
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Pointer4_Turn
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Pointer3_Turn
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Pointer2_Turn
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Pointer1_Turn
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Icon
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Gears
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_delay_Count
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_To_Sdram
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_AllPicture_To_Display
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Icon
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Window_Start_XY
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Width
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Start_Address
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_XY
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_WH
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
</UL>

<P><STRONG><a name="[19e]"></a>Show_Pointer1_Turn</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, lt768_demo.o(i.Show_Pointer1_Turn))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = Show_Pointer1_Turn &rArr; Pointer1_Turn &rArr; TEST_DoubleTriangle &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer1_Turn
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Panel
</UL>

<P><STRONG><a name="[19f]"></a>Show_Pointer2_Turn</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, lt768_demo.o(i.Show_Pointer2_Turn))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Show_Pointer2_Turn &rArr; Pointer2_Turn &rArr; TEST_DoubleTriangle &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer2_Turn
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Panel
</UL>

<P><STRONG><a name="[1a0]"></a>Show_Pointer3_Turn</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lt768_demo.o(i.Show_Pointer3_Turn))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Show_Pointer3_Turn &rArr; Pointer3_Turn &rArr; TEST_DoubleTriangle &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer3_Turn
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Panel
</UL>

<P><STRONG><a name="[1a1]"></a>Show_Pointer4_Turn</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lt768_demo.o(i.Show_Pointer4_Turn))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Show_Pointer4_Turn &rArr; Pointer4_Turn &rArr; TEST_DoubleTriangle &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer4_Turn
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Panel
</UL>

<P><STRONG><a name="[bb]"></a>Show_Progress1</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lt768_demo.o(i.Show_Progress1))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Show_Progress1 &rArr; LT768_DrawSquare_Fill &rArr; Start_Square_Fill &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Demo
</UL>

<P><STRONG><a name="[bc]"></a>Show_Progress2</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lt768_demo.o(i.Show_Progress2))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Show_Progress2 &rArr; LT768_DrawSquare_Fill &rArr; Start_Square_Fill &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Demo
</UL>

<P><STRONG><a name="[16b]"></a>Show_String</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lt768.o(i.Show_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Show_String &rArr; Text_Mode &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Mode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic_Mode
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Mem_WR_FIFO_not_Full
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Text
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Internal_Font_String
</UL>

<P><STRONG><a name="[bd]"></a>Show_Temperature</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, lt768_demo.o(i.Show_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Show_Temperature &rArr; LT768_DrawSquare_Fill &rArr; Start_Square_Fill &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Demo
</UL>

<P><STRONG><a name="[bf]"></a>Show_Text</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, lt768_demo.o(i.Show_Text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Show_Text &rArr; Goto_Text_XY &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_String
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goto_Text_XY
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_8x16_16x16
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGROM_Select_Internal_CGROM
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background_color_65k
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Demo
</UL>

<P><STRONG><a name="[19c]"></a>Show_Total</STRONG> (Thumb, 166 bytes, Stack size 56 bytes, lt768_demo.o(i.Show_Total))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Show_Total &rArr; LT768_BTE_Memory_Copy &rArr; BTE_Window_Size &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Internal_Font_String
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Panel
</UL>

<P><STRONG><a name="[19d]"></a>Show_temperature</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, lt768_demo.o(i.Show_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Show_temperature &rArr; LT768_BTE_Memory_Copy &rArr; BTE_Window_Size &rArr; LCD_RegisterWrite &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Internal_Font_String
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_BTE_Memory_Copy
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Panel
</UL>

<P><STRONG><a name="[127]"></a>Square_End_XY</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lt768.o(i.Square_End_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Square_End_XY &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircleSquare_Fill
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircleSquare
</UL>

<P><STRONG><a name="[126]"></a>Square_Start_XY</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lt768.o(i.Square_Start_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Square_Start_XY &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircleSquare_Fill
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircleSquare
</UL>

<P><STRONG><a name="[1a2]"></a>StartUp_picture</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lt768_demo.o(i.StartUp_picture))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = StartUp_picture &rArr; Waiting_ClickScreen &rArr; gt911_Scan &rArr; TP_read_XY &rArr; LT_I2C_Read_NByte &rArr; LT768_I2CM_transmit_Progress &rArr; LCD_DataRead &rArr; SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waiting_ClickScreen
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Window_Start_XY
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Width
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Start_Address
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_XY
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_WH
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>Start_Circle_Square</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lt768.o(i.Start_Circle_Square))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Start_Circle_Square &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Draw
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircleSquare
</UL>

<P><STRONG><a name="[129]"></a>Start_Circle_Square_Fill</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lt768.o(i.Start_Circle_Square_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Start_Circle_Square_Fill &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Draw
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircleSquare_Fill
</UL>

<P><STRONG><a name="[125]"></a>Start_Circle_or_Ellipse</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lt768.o(i.Start_Circle_or_Ellipse))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Start_Circle_or_Ellipse &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Draw
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawEllipse
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircle
</UL>

<P><STRONG><a name="[12a]"></a>Start_Circle_or_Ellipse_Fill</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lt768.o(i.Start_Circle_or_Ellipse_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Start_Circle_or_Ellipse_Fill &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Draw
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawEllipse_Fill
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircle_Fill
</UL>

<P><STRONG><a name="[12c]"></a>Start_Left_Down_Curve</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lt768.o(i.Start_Left_Down_Curve))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Start_Left_Down_Curve &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Draw
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLeftDownCurve
</UL>

<P><STRONG><a name="[12e]"></a>Start_Left_Down_Curve_Fill</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lt768.o(i.Start_Left_Down_Curve_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Start_Left_Down_Curve_Fill &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Draw
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLeftDownCurve_Fill
</UL>

<P><STRONG><a name="[130]"></a>Start_Left_Up_Curve</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lt768.o(i.Start_Left_Up_Curve))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Start_Left_Up_Curve &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Draw
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLeftUpCurve
</UL>

<P><STRONG><a name="[132]"></a>Start_Left_Up_Curve_Fill</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lt768.o(i.Start_Left_Up_Curve_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Start_Left_Up_Curve_Fill &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Draw
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLeftUpCurve_Fill
</UL>

<P><STRONG><a name="[135]"></a>Start_Line</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lt768.o(i.Start_Line))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Start_Line &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Draw
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLine1
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLine
</UL>

<P><STRONG><a name="[168]"></a>Start_PWM1</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Start_PWM1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Start_PWM1 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[13e]"></a>Start_Right_Down_Curve</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lt768.o(i.Start_Right_Down_Curve))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Start_Right_Down_Curve &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Draw
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawRightDownCurve
</UL>

<P><STRONG><a name="[140]"></a>Start_Right_Down_Curve_Fill</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lt768.o(i.Start_Right_Down_Curve_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Start_Right_Down_Curve_Fill &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Draw
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawRightDownCurve_Fill
</UL>

<P><STRONG><a name="[142]"></a>Start_Right_Up_Curve</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lt768.o(i.Start_Right_Up_Curve))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Start_Right_Up_Curve &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Draw
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawRightUpCurve
</UL>

<P><STRONG><a name="[144]"></a>Start_Right_Up_Curve_Fill</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lt768.o(i.Start_Right_Up_Curve_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Start_Right_Up_Curve_Fill &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Draw
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawRightUpCurve_Fill
</UL>

<P><STRONG><a name="[11d]"></a>Start_SFI_DMA</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Start_SFI_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Start_SFI_DMA &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Linear
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
</UL>

<P><STRONG><a name="[145]"></a>Start_Square</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lt768.o(i.Start_Square))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Start_Square &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Draw
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare
</UL>

<P><STRONG><a name="[146]"></a>Start_Square_Fill</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lt768.o(i.Start_Square_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Start_Square_Fill &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Draw
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
</UL>

<P><STRONG><a name="[147]"></a>Start_Triangle</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lt768.o(i.Start_Triangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Start_Triangle &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Draw
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawTriangle
</UL>

<P><STRONG><a name="[148]"></a>Start_Triangle_Fill</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lt768.o(i.Start_Triangle_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Start_Triangle_Fill &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; SPI_StatusRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Draw
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawTriangle_Fill
</UL>

<P><STRONG><a name="[169]"></a>Stop_PWM1</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Stop_PWM1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Stop_PWM1 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[1bc]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[1a3]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[154]"></a>System_Check_Temp</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lt768_lib.o(i.System_Check_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = System_Check_Temp &rArr; LT768_HW_Reset &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_HW_Reset
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StatusRead
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Init
</UL>

<P><STRONG><a name="[183]"></a>TEST_DoubleTriangle</STRONG> (Thumb, 1744 bytes, Stack size 88 bytes, lt768_demo.o(i.TEST_DoubleTriangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = TEST_DoubleTriangle &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawTriangle_Fill
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawCircle_Fill
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer_Show
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer4_Turn
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer3_Turn
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer2_Turn
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pointer1_Turn
</UL>

<P><STRONG><a name="[199]"></a>TFT_16bit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lt768.o(i.TFT_16bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TFT_16bit &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[1a7]"></a>TP_read_XY</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, gt911.o(i.TP_read_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = TP_read_XY &rArr; LT_I2C_Read_NByte &rArr; LT768_I2CM_transmit_Progress &rArr; LCD_DataRead &rArr; SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT_I2C_Read_NByte
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_transmit_Progress
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Write_With_Start
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Write
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Transmit_Data
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Stop
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Check_Slave_ACK
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_I2CM_Bus_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt911_Scan
</UL>

<P><STRONG><a name="[174]"></a>Text_Cursor_H_V</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lt768.o(i.Text_Cursor_H_V))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Text_Cursor_H_V &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Text_cursor_Init
</UL>

<P><STRONG><a name="[191]"></a>Text_Demo</STRONG> (Thumb, 1760 bytes, Stack size 40 bytes, lt768_demo.o(i.Text_Demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Text_Demo &rArr; Screen_delay_Count &rArr; Scan_Screen_Delay_1ms &rArr; gt911_Scan &rArr; TP_read_XY &rArr; LT_I2C_Read_NByte &rArr; LT768_I2CM_transmit_Progress &rArr; LCD_DataRead &rArr; SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Screen_delay_Count
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Text_cursor_Init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Set_Graphic_cursor_Pos
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Internal_Font_String
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Graphic_cursor_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Disable_Text_Cursor
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Disable_Graphic_Cursor
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DMA_24bit_Block
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Window_Start_XY
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Width
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Start_Address
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_XY
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_WH
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
</UL>

<P><STRONG><a name="[16a]"></a>Text_Mode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.Text_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Text_Mode &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Outside_Font_String
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Internal_Font_String
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_String
</UL>

<P><STRONG><a name="[138]"></a>Triangle_Point1_XY</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lt768.o(i.Triangle_Point1_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Triangle_Point1_XY &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawTriangle_Fill
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawTriangle
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawQuadrilateral_Fill
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawQuadrilateral
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawPentagon_Fill
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawPentagon
</UL>

<P><STRONG><a name="[139]"></a>Triangle_Point2_XY</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lt768.o(i.Triangle_Point2_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Triangle_Point2_XY &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawTriangle_Fill
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawTriangle
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawQuadrilateral_Fill
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawQuadrilateral
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawPentagon_Fill
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawPentagon
</UL>

<P><STRONG><a name="[13a]"></a>Triangle_Point3_XY</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lt768.o(i.Triangle_Point3_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Triangle_Point3_XY &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawTriangle_Fill
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawTriangle
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawQuadrilateral_Fill
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawQuadrilateral
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawPentagon_Fill
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawPentagon
</UL>

<P><STRONG><a name="[1be]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[1a8]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[192]"></a>VSCAN_T_to_B</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.VSCAN_T_to_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VSCAN_T_to_B &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[198]"></a>VSYNC_Low_Active</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.VSYNC_Low_Active))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = VSYNC_Low_Active &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[cc]"></a>Waiting_ClickScreen</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lt768_demo.o(i.Waiting_ClickScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Waiting_ClickScreen &rArr; gt911_Scan &rArr; TP_read_XY &rArr; LT_I2C_Read_NByte &rArr; LT768_I2CM_transmit_Progress &rArr; LCD_DataRead &rArr; SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt911_Scan
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUp_picture
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Levetop
</UL>

<P><STRONG><a name="[194]"></a>Waveform_Demo</STRONG> (Thumb, 1264 bytes, Stack size 56 bytes, lt768_demo.o(i.Waveform_Demo))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Waveform_Demo &rArr; Load_SineWaveDate &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_WaveDate
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_TriangleWaveDate
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SineWaveDate
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawLine1
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drawing_TriangleWave
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Drawing_SineWaveDate
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gt911_Scan
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Outside_Font_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Outside_Font_String
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Internal_Font_String
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Width
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Interrupt_status
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Window_Start_XY
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Width
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Start_Address
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Vsync_Interrupt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Vsync_Interrupt_Flag
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_XY
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_WH
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
</UL>

<P><STRONG><a name="[97]"></a>Write_GPIO_A_7_0</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lt768.o(i.Write_GPIO_A_7_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Write_GPIO_A_7_0 &rArr; LCD_DataWrite &rArr; SPI_DataWrite_8
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
</UL>

<P><STRONG><a name="[1ac]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d1]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[96]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Copy_Picture_To_Display
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_read_XY
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Check_Temp
</UL>

<P><STRONG><a name="[1ae]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d2]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[87]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waveform_Demo
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_Control
</UL>

<P><STRONG><a name="[1b4]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[1af]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[1b1]"></a>__kernel_cos</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[1b2]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1b3]"></a>__kernel_sin</STRONG> (Thumb, 224 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[1b6]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[1b7]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[1b5]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[1d3]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1d4]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1d5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1ba]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[df]"></a>abs1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lt768_demo.o(i.abs1))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Rectangle
</UL>

<P><STRONG><a name="[1a4]"></a>cos</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_DoubleTriangle
</UL>

<P><STRONG><a name="[1bb]"></a>delay_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>delay_ms</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Key_delay
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Key
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Demo
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Screen_Delay_1ms
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIP_Demo
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Rectangle
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Polygon
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Line_Curve
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Circle_Ellipse
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Demo
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_Control
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_slide_frame_buffer
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Check_Temp
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SDRAM_initail
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PLL_Initial
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_HW_Reset
</UL>

<P><STRONG><a name="[64]"></a>delay_us</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Demo_BTE
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_read_XY
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT_I2C_Read_NByte
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PLL_Initial
</UL>

<P><STRONG><a name="[37]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[89]"></a>gt911_Scan</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gt911.o(i.gt911_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = gt911_Scan &rArr; TP_read_XY &rArr; LT_I2C_Read_NByte &rArr; LT768_I2CM_transmit_Progress &rArr; LCD_DataRead &rArr; SPI_DataRead_8
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_read_XY
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waveform_Demo
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Waiting_ClickScreen
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scan_Screen_Delay_1ms
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Backlight_Control
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = main &rArr; Select_Function &rArr; Controller_Demo &rArr; Pointer_Show &rArr; TEST_DoubleTriangle &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUp_picture
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_Dual_Mode0
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Function
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parallel_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_GUI
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ON
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTP_io_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[177]"></a>sin</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_DoubleTriangle
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Load_SineWaveDate
</UL>

<P><STRONG><a name="[1bd]"></a>uart_init</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, usart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[196]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[197]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[1ad]"></a>_printf_core</STRONG> (Thumb, 984 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[1b9]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b8]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[38]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
