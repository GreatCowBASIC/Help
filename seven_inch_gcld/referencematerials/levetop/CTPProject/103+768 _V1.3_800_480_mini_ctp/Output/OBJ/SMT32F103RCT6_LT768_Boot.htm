<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\OBJ\SMT32F103RCT6_LT768_Boot.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\OBJ\SMT32F103RCT6_LT768_Boot.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Tue Jan 03 14:17:39 2023
<BR><P>
<H3>Maximum Stack Usage =       2352 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Flash_Updata &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1f]">CAN_RX1_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[20]">CAN_SCE_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[15]">DMAChannel1_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[16]">DMAChannel2_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[17]">DMAChannel3_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[18]">DMAChannel4_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[19]">DMAChannel5_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1a]">DMAChannel6_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1b]">DMAChannel7_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN_TX_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN_RX0_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[36]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from stm32f10x.o(.text)
 <LI><a href="#[38]">_sputc</a> from printf5.o(i._sputc) referenced from printf5.o(i.__0sprintf$5)
 <LI><a href="#[37]">fputc</a> from usart.o(i.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[35]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[36]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(.text)
</UL>
<P><STRONG><a name="[147]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[39]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[49]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[148]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[149]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[14a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[14b]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[14c]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMAChannel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMAChannel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMAChannel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMAChannel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMAChannel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMAChannel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMAChannel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[14d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_BadBlock
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[14f]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[151]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3f]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[87]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_find
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[153]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[41]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[3a]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[155]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[156]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>APP</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.APP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = APP &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>APP_Updata</STRONG> (Thumb, 542 bytes, Stack size 1176 bytes, download.o(i.APP_Updata))
<BR><BR>[Stack]<UL><LI>Max Depth = 2256<LI>Call Chain = APP_Updata &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_to_char
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Internal_Font_String
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc32
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>Active_Window_WH</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lt768.o(i.Active_Window_WH))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Active_Window_WH &rArr; LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>Active_Window_XY</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lt768.o(i.Active_Window_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Active_Window_XY &rArr; LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>Background_color_65k</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lt768.o(i.Background_color_65k))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Background_color_65k
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Internal_Font_String
</UL>

<P><STRONG><a name="[5d]"></a>CGROM_Select_Internal_CGROM</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.CGROM_Select_Internal_CGROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CGROM_Select_Internal_CGROM &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Internal_Font_String
</UL>

<P><STRONG><a name="[5f]"></a>Canvas_Image_Start_address</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lt768.o(i.Canvas_Image_Start_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Canvas_Image_Start_address &rArr; LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>Canvas_image_width</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Canvas_image_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Canvas_image_width &rArr; LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>Check_2D_Busy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lt768.o(i.Check_2D_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Check_2D_Busy &rArr; LCD_StatusRead &rArr; S8080_StatusRead
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StatusRead
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_String
</UL>

<P><STRONG><a name="[63]"></a>Check_BadBlock</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, download.o(i.Check_BadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Check_BadBlock &rArr; W25N01GV_Write_NoCheck &rArr; W25N01GV_WritePageAddr_Data &rArr; W25N01GV_Write_SR &rArr; W25N01GV_Write_Enable &rArr; SPI_Master_FIFO_Data_Put &rArr; SPI_Master_FIFO_Data_Get &rArr; Rx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Write_NoCheck
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Read_NoCheck
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Erase_Block
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_BBM
</UL>

<P><STRONG><a name="[67]"></a>Check_Busy_Draw</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lt768.o(i.Check_Busy_Draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Check_Busy_Draw &rArr; LCD_StatusRead &rArr; S8080_StatusRead
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StatusRead
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Square_Fill
</UL>

<P><STRONG><a name="[68]"></a>Check_Mem_WR_FIFO_not_Full</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lt768.o(i.Check_Mem_WR_FIFO_not_Full))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Check_Mem_WR_FIFO_not_Full &rArr; LCD_StatusRead &rArr; S8080_StatusRead
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StatusRead
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_String
</UL>

<P><STRONG><a name="[69]"></a>Check_SDRAM_Ready</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lt768.o(i.Check_SDRAM_Ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Check_SDRAM_Ready &rArr; LCD_StatusRead &rArr; S8080_StatusRead
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StatusRead
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SDRAM_initail
</UL>

<P><STRONG><a name="[6a]"></a>CmdError</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sdio_sdcard.o(i.CmdError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdError
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[6d]"></a>CmdResp1Error</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sdio_sdcard.o(i.CmdResp1Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[6e]"></a>CmdResp2Error</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sdio_sdcard.o(i.CmdResp2Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp2Error
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[6f]"></a>CmdResp3Error</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sdio_sdcard.o(i.CmdResp3Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp3Error
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[70]"></a>CmdResp6Error</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sdio_sdcard.o(i.CmdResp6Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CmdResp6Error
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[71]"></a>CmdResp7Error</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sdio_sdcard.o(i.CmdResp7Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CmdResp7Error
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[72]"></a>DE_High_Active</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.DE_High_Active))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DE_High_Active &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[e0]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[df]"></a>DMA_DeInit</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[e1]"></a>DMA_Init</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[da]"></a>DataPin_In</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, if_port.o(i.DataPin_In))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S8080_StatusRead
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S8080_DataRead
</UL>

<P><STRONG><a name="[db]"></a>Datain</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, if_port.o(i.Datain))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S8080_StatusRead
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S8080_DataRead
</UL>

<P><STRONG><a name="[73]"></a>Disable_Font_Alignment</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Disable_Font_Alignment))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Disable_Font_Alignment &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[74]"></a>Display_ON</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Display_ON))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Display_ON &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>Enable_Font_Alignment</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Enable_Font_Alignment))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Enable_Font_Alignment &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[76]"></a>Enable_SFlash_SPI</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Enable_SFlash_SPI))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Enable_SFlash_SPI &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SPI_Init
</UL>

<P><STRONG><a name="[77]"></a>FLASH_ErasePage</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[7a]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetBank1Status))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[101]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[79]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, stm32f10x_flash.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write_NoCheck
</UL>

<P><STRONG><a name="[fe]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[78]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[7b]"></a>FindSCR</STRONG> (Thumb, 298 bytes, Stack size 48 bytes, sdio_sdcard.o(i.FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[7f]"></a>Flash_Updata</STRONG> (Thumb, 724 bytes, Stack size 1232 bytes, download.o(i.Flash_Updata))
<BR><BR>[Stack]<UL><LI>Max Depth = 2312<LI>Call Chain = Flash_Updata &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_BlockErase64KB
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Write_NoCheck
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Read_NoCheck
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Erase_Block
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_to_char
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_BBM
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Internal_Font_String
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCrc32
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>Flash_find</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, main.o(i.Flash_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Flash_find &rArr; LT768_Print_Internal_Font_String &rArr; Show_String &rArr; Check_Mem_WR_FIFO_not_Full &rArr; LCD_StatusRead &rArr; S8080_StatusRead
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Enter_4Byte_AddressMode
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_ReadID
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Internal_Font_String
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>Font_Background_select_Color</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Font_Background_select_Color))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Font_Background_select_Color &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[8b]"></a>Font_Background_select_Transparency</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Font_Background_select_Transparency))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Font_Background_select_Transparency &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[8c]"></a>Font_Height_X1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Font_Height_X1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Font_Height_X1 &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[8d]"></a>Font_Height_X2</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lt768.o(i.Font_Height_X2))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Font_Height_X2 &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[8e]"></a>Font_Height_X3</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lt768.o(i.Font_Height_X3))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Font_Height_X3 &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[8f]"></a>Font_Height_X4</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Font_Height_X4))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Font_Height_X4 &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[90]"></a>Font_Select_12x24_24x24</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lt768.o(i.Font_Select_12x24_24x24))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Font_Select_12x24_24x24 &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[91]"></a>Font_Select_16x32_32x32</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lt768.o(i.Font_Select_16x32_32x32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Font_Select_16x32_32x32 &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[92]"></a>Font_Select_8x16_16x16</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Font_Select_8x16_16x16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Font_Select_8x16_16x16 &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[93]"></a>Font_Width_X1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Font_Width_X1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Font_Width_X1 &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[94]"></a>Font_Width_X2</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lt768.o(i.Font_Width_X2))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Font_Width_X2 &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[95]"></a>Font_Width_X3</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lt768.o(i.Font_Width_X3))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Font_Width_X3 &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[96]"></a>Font_Width_X4</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Font_Width_X4))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Font_Width_X4 &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
</UL>

<P><STRONG><a name="[97]"></a>Foreground_color_65k</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lt768.o(i.Foreground_color_65k))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Foreground_color_65k
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Internal_Font_String
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
</UL>

<P><STRONG><a name="[9f]"></a>GPIO_Init</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_HW_Reset
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_S8080
</UL>

<P><STRONG><a name="[9e]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_S8080
</UL>

<P><STRONG><a name="[b0]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_HW_Reset
</UL>

<P><STRONG><a name="[b2]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_HW_Reset
</UL>

<P><STRONG><a name="[52]"></a>GetCrc32</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, main.o(i.GetCrc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetCrc32
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Updata
</UL>

<P><STRONG><a name="[98]"></a>Goto_Text_XY</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lt768.o(i.Goto_Text_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Goto_Text_XY &rArr; LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Internal_Font_String
</UL>

<P><STRONG><a name="[99]"></a>Graphic_Mode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Graphic_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Graphic_Mode &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_String
</UL>

<P><STRONG><a name="[9a]"></a>HSYNC_Low_Active</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.HSYNC_Low_Active))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HSYNC_Low_Active &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[9b]"></a>Host_Bus_8bit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Host_Bus_8bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Host_Bus_8bit &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[4c]"></a>INTX_DISABLE</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(i.INTX_DISABLE))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[f2]"></a>INTX_ENABLE</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys.o(i.INTX_ENABLE))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[9c]"></a>Init_S8080</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, if_port.o(i.Init_S8080))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Init_S8080 &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parallel_Init
</UL>

<P><STRONG><a name="[a0]"></a>IsCardProgramming</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, sdio_sdcard.o(i.IsCardProgramming))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsCardProgramming &rArr; SDIO_SendCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[5b]"></a>LCD_CmdWrite</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, if_port.o(i.LCD_CmdWrite))
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S8080_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ON
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_WritePageAddr_Data
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Check_Temp
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PLL_Initial
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Inactive
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Active
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_Low_Active
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSCAN_T_to_B
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_FIFO_Empty_Flag
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Mode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_16bit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_PWM1
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Square_Fill
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_PWM1
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Square_Start_XY
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Square_End_XY
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_String
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Timer1_Count_Buffer
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Timer1_Compare_Buffer
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_PWM_Prescaler_1_to_256
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_nSS_drive_on_xnsfcs1
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_nSS_drive_on_xnsfcs0
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_1
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_0
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_8
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_4
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_2
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_1
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_FIFO_Data_Put
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_FIFO_Data_Get
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Clock_Period
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_FIFO_Empty_Flag
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_16b_16bpp
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDATA_Set_RGB
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCLK_Falling
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_XY_Mode
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Select_SDRAM
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_16bpp_Mode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemWrite_Left_Right_Top_Down
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Vertical_Non_Display
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VSYNC_Start_Position
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VSYNC_Pulse_Width
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Horizontal_Non_Display
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HorizontalWidth_VerticalHeight
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HSYNC_Start_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HSYNC_Pulse_Width
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Bus_8bit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSYNC_Low_Active
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic_Mode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X4
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X3
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X2
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_8x16_16x16
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_16x32_32x32
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_12x24_24x24
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X4
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X3
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X2
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X1
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Background_select_Transparency
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Background_select_Color
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SFlash_SPI
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Font_Alignment
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Font_Alignment
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_High_Active
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGROM_Select_Internal_CGROM
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background_color_65k
</UL>

<P><STRONG><a name="[5e]"></a>LCD_DataRead</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, if_port.o(i.LCD_DataRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S8080_DataRead
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ON
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Check_Temp
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Inactive
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Active
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_Low_Active
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSCAN_T_to_B
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_FIFO_Empty_Flag
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Mode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_16bit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_PWM1
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_PWM1
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_nSS_drive_on_xnsfcs1
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_nSS_drive_on_xnsfcs0
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_1
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_0
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_8
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_4
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_2
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_1
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_FIFO_Data_Get
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_FIFO_Empty_Flag
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_16b_16bpp
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDATA_Set_RGB
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCLK_Falling
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_XY_Mode
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Select_SDRAM
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_16bpp_Mode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemWrite_Left_Right_Top_Down
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Bus_8bit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSYNC_Low_Active
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic_Mode
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X4
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X3
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X2
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_8x16_16x16
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_16x32_32x32
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_12x24_24x24
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X4
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X3
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X2
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X1
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Background_select_Transparency
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Background_select_Color
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SFlash_SPI
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Font_Alignment
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Font_Alignment
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_High_Active
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGROM_Select_Internal_CGROM
</UL>

<P><STRONG><a name="[5c]"></a>LCD_DataWrite</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, if_port.o(i.LCD_DataWrite))
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S8080_DataWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ON
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_WritePageAddr_Data
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Check_Temp
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PLL_Initial
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Inactive
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Active
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_Low_Active
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSCAN_T_to_B
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Mode
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_16bit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_PWM1
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Square_Fill
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_PWM1
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Square_Start_XY
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Square_End_XY
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_String
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Timer1_Count_Buffer
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Timer1_Compare_Buffer
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_PWM_Prescaler_1_to_256
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_nSS_drive_on_xnsfcs1
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_nSS_drive_on_xnsfcs0
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_1
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_0
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_8
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_4
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_2
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_1
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_FIFO_Data_Put
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Clock_Period
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_16b_16bpp
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDATA_Set_RGB
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCLK_Falling
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_XY_Mode
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Select_SDRAM
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_16bpp_Mode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemWrite_Left_Right_Top_Down
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Vertical_Non_Display
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VSYNC_Start_Position
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VSYNC_Pulse_Width
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Horizontal_Non_Display
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HorizontalWidth_VerticalHeight
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HSYNC_Start_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HSYNC_Pulse_Width
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Bus_8bit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSYNC_Low_Active
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic_Mode
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X4
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X3
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X2
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_8x16_16x16
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_16x32_32x32
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_12x24_24x24
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X4
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X3
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X2
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X1
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Background_select_Transparency
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Background_select_Color
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SFlash_SPI
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Font_Alignment
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Font_Alignment
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_High_Active
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGROM_Select_Internal_CGROM
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background_color_65k
</UL>

<P><STRONG><a name="[a4]"></a>LCD_HSYNC_Pulse_Width</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lt768.o(i.LCD_HSYNC_Pulse_Width))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_HSYNC_Pulse_Width
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[a5]"></a>LCD_HSYNC_Start_Position</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lt768.o(i.LCD_HSYNC_Start_Position))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_HSYNC_Start_Position
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[a6]"></a>LCD_HorizontalWidth_VerticalHeight</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lt768.o(i.LCD_HorizontalWidth_VerticalHeight))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_HorizontalWidth_VerticalHeight
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[a7]"></a>LCD_Horizontal_Non_Display</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lt768.o(i.LCD_Horizontal_Non_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Horizontal_Non_Display
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[58]"></a>LCD_RegisterWrite</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lt768.o(i.LCD_RegisterWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Window_Start_XY
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Width
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Start_Address
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_XY
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_WH
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SDRAM_initail
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goto_Text_XY
</UL>

<P><STRONG><a name="[62]"></a>LCD_StatusRead</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, if_port.o(i.LCD_StatusRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_StatusRead &rArr; S8080_StatusRead
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S8080_StatusRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Check_Temp
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SDRAM_Ready
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Mem_WR_FIFO_not_Full
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Draw
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>

<P><STRONG><a name="[a9]"></a>LCD_VSYNC_Pulse_Width</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lt768.o(i.LCD_VSYNC_Pulse_Width))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_VSYNC_Pulse_Width
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[aa]"></a>LCD_VSYNC_Start_Position</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lt768.o(i.LCD_VSYNC_Start_Position))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_VSYNC_Start_Position
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[ab]"></a>LCD_Vertical_Non_Display</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lt768.o(i.LCD_Vertical_Non_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_Vertical_Non_Display
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[89]"></a>LT768_DrawSquare_Fill</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lt768_lib.o(i.LT768_DrawSquare_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LT768_DrawSquare_Fill &rArr; Start_Square_Fill &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; S8080_StatusRead
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Square_Fill
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Square_Start_XY
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Square_End_XY
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_find
</UL>

<P><STRONG><a name="[af]"></a>LT768_HW_Reset</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lt768_lib.o(i.LT768_HW_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LT768_HW_Reset &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Check_Temp
</UL>

<P><STRONG><a name="[b3]"></a>LT768_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lt768_lib.o(i.LT768_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LT768_Init &rArr; System_Check_Temp &rArr; LT768_HW_Reset &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Check_Temp
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_initial
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_HW_Reset
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StatusRead
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>LT768_PLL_Initial</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, lt768_lib.o(i.LT768_PLL_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LT768_PLL_Initial
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_initial
</UL>

<P><STRONG><a name="[b8]"></a>LT768_PWM1_Init</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lt768_lib.o(i.LT768_PWM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LT768_PWM1_Init &rArr; Stop_PWM1 &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_PWM1
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_PWM1
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Timer1_Count_Buffer
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Timer1_Compare_Buffer
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_PWM_Prescaler_1_to_256
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_8
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_4
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_2
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1_Clock_Divided_By_1
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_PWM1
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[50]"></a>LT768_Print_Internal_Font_String</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lt768_lib.o(i.LT768_Print_Internal_Font_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LT768_Print_Internal_Font_String &rArr; Show_String &rArr; Check_Mem_WR_FIFO_not_Full &rArr; LCD_StatusRead &rArr; S8080_StatusRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Mode
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_String
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Goto_Text_XY
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Foreground_color_65k
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CGROM_Select_Internal_CGROM
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Background_color_65k
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_BBM
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Updata
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_find
</UL>

<P><STRONG><a name="[c5]"></a>LT768_SDRAM_initail</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lt768_lib.o(i.LT768_SDRAM_initail))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LT768_SDRAM_initail &rArr; Check_SDRAM_Ready &rArr; LCD_StatusRead &rArr; S8080_StatusRead
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_SDRAM_Ready
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_initial
</UL>

<P><STRONG><a name="[c6]"></a>LT768_SPI_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lt768_lib.o(i.LT768_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LT768_SPI_Init &rArr; Select_nSS_drive_on_xnsfcs1 &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_nSS_drive_on_xnsfcs1
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_nSS_drive_on_xnsfcs0
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_1
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_SFI_0
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Clock_Period
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SFlash_SPI
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>LT768_Select_Internal_Font_Init</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, lt768_lib.o(i.LT768_Select_Internal_Font_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LT768_Select_Internal_Font_Init &rArr; Font_Width_X4 &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X4
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X3
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X2
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Width_X1
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_8x16_16x16
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_16x32_32x32
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Select_12x24_24x24
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X4
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X3
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X2
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Height_X1
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Background_select_Transparency
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Font_Background_select_Color
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_Font_Alignment
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_Font_Alignment
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>LT768_initial</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lt768_lib.o(i.LT768_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LT768_initial &rArr; Set_LCD_Panel &rArr; LCD_HorizontalWidth_VerticalHeight
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SDRAM_initail
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PLL_Initial
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Init
</UL>

<P><STRONG><a name="[ce]"></a>Main_Image_Start_Address</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lt768.o(i.Main_Image_Start_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Main_Image_Start_Address &rArr; LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>Main_Image_Width</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Main_Image_Width))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Main_Image_Width &rArr; LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>Main_Window_Start_XY</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lt768.o(i.Main_Window_Start_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Main_Window_Start_XY &rArr; LCD_RegisterWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RegisterWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[144]"></a>Make_CRC32_Table</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, main.o(i.Make_CRC32_Table))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Make_CRC32_Table
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>MemWrite_Left_Right_Top_Down</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.MemWrite_Left_Right_Top_Down))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MemWrite_Left_Right_Top_Down &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[d2]"></a>Memory_16bpp_Mode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lt768.o(i.Memory_16bpp_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Memory_16bpp_Mode &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[d3]"></a>Memory_Select_SDRAM</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Memory_Select_SDRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Memory_Select_SDRAM &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[d4]"></a>Memory_XY_Mode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Memory_XY_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Memory_XY_Mode &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[e5]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[d5]"></a>PCLK_Falling</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.PCLK_Falling))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PCLK_Falling &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[d6]"></a>PDATA_Set_RGB</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.PDATA_Set_RGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PDATA_Set_RGB &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[d7]"></a>Parallel_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, if_port.o(i.Parallel_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Parallel_Init &rArr; Init_S8080 &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_S8080
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[de]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
</UL>

<P><STRONG><a name="[9d]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_HW_Reset
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_S8080
</UL>

<P><STRONG><a name="[109]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[d8]"></a>RGB_16b_16bpp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lt768.o(i.RGB_16b_16bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RGB_16b_16bpp &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[d9]"></a>Rx_FIFO_Empty_Flag</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Rx_FIFO_Empty_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Rx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_FIFO_Data_Get
</UL>

<P><STRONG><a name="[a1]"></a>S8080_CmdWrite</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, if_port.o(i.S8080_CmdWrite))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>

<P><STRONG><a name="[a2]"></a>S8080_DataRead</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, if_port.o(i.S8080_DataRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datain
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPin_In
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
</UL>

<P><STRONG><a name="[a3]"></a>S8080_DataWrite</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, if_port.o(i.S8080_DataWrite))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
</UL>

<P><STRONG><a name="[a8]"></a>S8080_StatusRead</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, if_port.o(i.S8080_StatusRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = S8080_StatusRead
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Datain
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataPin_In
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StatusRead
</UL>

<P><STRONG><a name="[dc]"></a>SDEnWideBus</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, sdio_sdcard.o(i.SDEnWideBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[6c]"></a>SDIO_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[ef]"></a>SDIO_ClockCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[ea]"></a>SDIO_Clock_Set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdio_sdcard.o(i.SDIO_Clock_Set))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[f3]"></a>SDIO_DMACmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[7d]"></a>SDIO_DataConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f10x_sdio.o(i.SDIO_DataConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_DataConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[e4]"></a>SDIO_DeInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[6b]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>

<P><STRONG><a name="[ec]"></a>SDIO_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[ed]"></a>SDIO_Init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f10x_sdio.o(i.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[7e]"></a>SDIO_ReadData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[7c]"></a>SDIO_SendCommand</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_sdio.o(i.SDIO_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
</UL>

<P><STRONG><a name="[ee]"></a>SDIO_SetPowerState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_SetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[f8]"></a>SDIO_WriteData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_WriteData))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[dd]"></a>SD_DMA_Config</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, sdio_sdcard.o(i.SD_DMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[e2]"></a>SD_EnableWideBusOperation</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, sdio_sdcard.o(i.SD_EnableWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[e8]"></a>SD_GetCardInfo</STRONG> (Thumb, 520 bytes, Stack size 32 bytes, sdio_sdcard.o(i.SD_GetCardInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[e3]"></a>SD_Init</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, sdio_sdcard.o(i.SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDeviceMode
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Clock_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[e7]"></a>SD_InitializeCards</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, sdio_sdcard.o(i.SD_InitializeCards))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_InitializeCards &rArr; CmdResp6Error
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[e6]"></a>SD_PowerON</STRONG> (Thumb, 364 bytes, Stack size 40 bytes, sdio_sdcard.o(i.SD_PowerON))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SD_PowerON &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[f0]"></a>SD_ReadBlock</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, sdio_sdcard.o(i.SD_ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SD_ReadBlock &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[f4]"></a>SD_ReadDisk</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, sdio_sdcard.o(i.SD_ReadDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[f6]"></a>SD_ReadMultiBlocks</STRONG> (Thumb, 588 bytes, Stack size 64 bytes, sdio_sdcard.o(i.SD_ReadMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>

<P><STRONG><a name="[e9]"></a>SD_SelectDeselect</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sdio_sdcard.o(i.SD_SelectDeselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_SelectDeselect &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[eb]"></a>SD_SetDeviceMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sdio_sdcard.o(i.SD_SetDeviceMode))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[f7]"></a>SD_WriteBlock</STRONG> (Thumb, 708 bytes, Stack size 48 bytes, sdio_sdcard.o(i.SD_WriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SD_WriteBlock &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteData
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>

<P><STRONG><a name="[f9]"></a>SD_WriteDisk</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, sdio_sdcard.o(i.SD_WriteDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[fa]"></a>SD_WriteMultiBlocks</STRONG> (Thumb, 734 bytes, Stack size 48 bytes, sdio_sdcard.o(i.SD_WriteMultiBlocks))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_ENABLE
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTX_DISABLE
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteData
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMA_Config
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>

<P><STRONG><a name="[c9]"></a>SPI_Clock_Period</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lt768.o(i.SPI_Clock_Period))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Clock_Period
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SPI_Init
</UL>

<P><STRONG><a name="[fb]"></a>SPI_Master_FIFO_Data_Get</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lt768.o(i.SPI_Master_FIFO_Data_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_Master_FIFO_Data_Get &rArr; Rx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rx_FIFO_Empty_Flag
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_FIFO_Data_Put
</UL>

<P><STRONG><a name="[fc]"></a>SPI_Master_FIFO_Data_Put</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lt768.o(i.SPI_Master_FIFO_Data_Put))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SPI_Master_FIFO_Data_Put &rArr; SPI_Master_FIFO_Data_Get &rArr; Rx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tx_FIFO_Empty_Flag
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_FIFO_Data_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_BlockErase64KB
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Read_BBM_LUT
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_ReadSR
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Erase_Block
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Bad_Block_Replace
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Enter_4Byte_AddressMode
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_ReadID
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Write_SR
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Write_Enable
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Write_Disable
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_WritePageAddr_Data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_ReadPageAddr_Data
</UL>

<P><STRONG><a name="[ff]"></a>STMFLASH_Read</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stmflash.o(i.STMFLASH_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = STMFLASH_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[55]"></a>STMFLASH_Write</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, stmflash.o(i.STMFLASH_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = STMFLASH_Write &rArr; STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write_NoCheck
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Updata
</UL>

<P><STRONG><a name="[100]"></a>STMFLASH_Write_NoCheck</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, stmflash.o(i.STMFLASH_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = STMFLASH_Write_NoCheck &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;STMFLASH_Write
</UL>

<P><STRONG><a name="[102]"></a>Select_Main_Window_16bpp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lt768.o(i.Select_Main_Window_16bpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Select_Main_Window_16bpp &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[b9]"></a>Select_PWM1</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lt768.o(i.Select_PWM1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Select_PWM1 &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[bb]"></a>Select_PWM1_Clock_Divided_By_1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Select_PWM1_Clock_Divided_By_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Select_PWM1_Clock_Divided_By_1 &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[bc]"></a>Select_PWM1_Clock_Divided_By_2</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lt768.o(i.Select_PWM1_Clock_Divided_By_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Select_PWM1_Clock_Divided_By_2 &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[bd]"></a>Select_PWM1_Clock_Divided_By_4</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lt768.o(i.Select_PWM1_Clock_Divided_By_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Select_PWM1_Clock_Divided_By_4 &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[be]"></a>Select_PWM1_Clock_Divided_By_8</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Select_PWM1_Clock_Divided_By_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Select_PWM1_Clock_Divided_By_8 &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[ca]"></a>Select_SFI_0</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Select_SFI_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Select_SFI_0 &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SPI_Init
</UL>

<P><STRONG><a name="[c7]"></a>Select_SFI_1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Select_SFI_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Select_SFI_1 &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SPI_Init
</UL>

<P><STRONG><a name="[cb]"></a>Select_nSS_drive_on_xnsfcs0</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Select_nSS_drive_on_xnsfcs0))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Select_nSS_drive_on_xnsfcs0 &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SPI_Init
</UL>

<P><STRONG><a name="[c8]"></a>Select_nSS_drive_on_xnsfcs1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Select_nSS_drive_on_xnsfcs1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Select_nSS_drive_on_xnsfcs1 &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SPI_Init
</UL>

<P><STRONG><a name="[cd]"></a>Set_LCD_Panel</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, lt768_lib.o(i.Set_LCD_Panel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Set_LCD_Panel &rArr; LCD_HorizontalWidth_VerticalHeight
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSYNC_Low_Active
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VSCAN_T_to_B
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFT_16bit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Main_Window_16bpp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_16b_16bpp
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDATA_Set_RGB
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCLK_Falling
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_XY_Mode
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_Select_SDRAM
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Memory_16bpp_Mode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemWrite_Left_Right_Top_Down
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Vertical_Non_Display
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VSYNC_Start_Position
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_VSYNC_Pulse_Width
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Horizontal_Non_Display
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HorizontalWidth_VerticalHeight
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HSYNC_Start_Position
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_HSYNC_Pulse_Width
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Bus_8bit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSYNC_Low_Active
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic_Mode
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DE_High_Active
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_initial
</UL>

<P><STRONG><a name="[ba]"></a>Set_PWM_Prescaler_1_to_256</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lt768.o(i.Set_PWM_Prescaler_1_to_256))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_PWM_Prescaler_1_to_256
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[c0]"></a>Set_Timer1_Compare_Buffer</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lt768.o(i.Set_Timer1_Compare_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_Timer1_Compare_Buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[bf]"></a>Set_Timer1_Count_Buffer</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lt768.o(i.Set_Timer1_Count_Buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set_Timer1_Count_Buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[c4]"></a>Show_String</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lt768.o(i.Show_String))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Show_String &rArr; Check_Mem_WR_FIFO_not_Full &rArr; LCD_StatusRead &rArr; S8080_StatusRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Text_Mode
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Graphic_Mode
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Mem_WR_FIFO_not_Full
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_2D_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Internal_Font_String
</UL>

<P><STRONG><a name="[ad]"></a>Square_End_XY</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lt768.o(i.Square_End_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Square_End_XY
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
</UL>

<P><STRONG><a name="[ac]"></a>Square_Start_XY</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lt768.o(i.Square_Start_XY))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Square_Start_XY
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
</UL>

<P><STRONG><a name="[c2]"></a>Start_PWM1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Start_PWM1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Start_PWM1 &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[ae]"></a>Start_Square_Fill</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lt768.o(i.Start_Square_Fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Start_Square_Fill &rArr; Check_Busy_Draw &rArr; LCD_StatusRead &rArr; S8080_StatusRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Busy_Draw
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
</UL>

<P><STRONG><a name="[c1]"></a>Stop_PWM1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Stop_PWM1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Stop_PWM1 &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
</UL>

<P><STRONG><a name="[128]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[106]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>System_Check_Temp</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lt768_lib.o(i.System_Check_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = System_Check_Temp &rArr; LT768_HW_Reset &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_HW_Reset
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_StatusRead
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Init
</UL>

<P><STRONG><a name="[105]"></a>TFT_16bit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lt768.o(i.TFT_16bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TFT_16bit &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[c3]"></a>Text_Mode</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Text_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Text_Mode &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Internal_Font_String
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_String
</UL>

<P><STRONG><a name="[fd]"></a>Tx_FIFO_Empty_Flag</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.Tx_FIFO_Empty_Flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Tx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_FIFO_Data_Put
</UL>

<P><STRONG><a name="[146]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[108]"></a>USART_Init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[104]"></a>VSCAN_T_to_B</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.VSCAN_T_to_B))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VSCAN_T_to_B &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[103]"></a>VSYNC_Low_Active</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.VSYNC_Low_Active))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VSYNC_Low_Active &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_LCD_Panel
</UL>

<P><STRONG><a name="[83]"></a>W25N01GV_BBM</STRONG> (Thumb, 306 bytes, Stack size 120 bytes, download.o(i.W25N01GV_BBM))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = W25N01GV_BBM &rArr; Check_BadBlock &rArr; W25N01GV_Write_NoCheck &rArr; W25N01GV_WritePageAddr_Data &rArr; W25N01GV_Write_SR &rArr; W25N01GV_Write_Enable &rArr; SPI_Master_FIFO_Data_Put &rArr; SPI_Master_FIFO_Data_Get &rArr; Rx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Read_BBM_LUT
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_ReadSR
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Bad_Block_Replace
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_BadBlock
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Internal_Font_String
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
</UL>

<P><STRONG><a name="[10c]"></a>W25N01GV_Bad_Block_Replace</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, flash.o(i.W25N01GV_Bad_Block_Replace))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = W25N01GV_Bad_Block_Replace &rArr; W25N01GV_Wait_Busy &rArr; W25N01GV_ReadSR &rArr; SPI_Master_FIFO_Data_Put &rArr; SPI_Master_FIFO_Data_Get &rArr; Rx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_ReadSR
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Write_Enable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Wait_Busy
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Inactive
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Active
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_FIFO_Data_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_BBM
</UL>

<P><STRONG><a name="[64]"></a>W25N01GV_Erase_Block</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, flash.o(i.W25N01GV_Erase_Block))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = W25N01GV_Erase_Block &rArr; W25N01GV_Write_SR &rArr; W25N01GV_Write_Enable &rArr; SPI_Master_FIFO_Data_Put &rArr; SPI_Master_FIFO_Data_Get &rArr; Rx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Write_SR
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Write_Enable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Wait_Busy
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Inactive
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Active
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_FIFO_Data_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_BadBlock
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
</UL>

<P><STRONG><a name="[86]"></a>W25N01GV_ReadID</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, flash.o(i.W25N01GV_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = W25N01GV_ReadID &rArr; SPI_Master_FIFO_Data_Put &rArr; SPI_Master_FIFO_Data_Get &rArr; Rx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Inactive
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Active
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_FIFO_Data_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_find
</UL>

<P><STRONG><a name="[112]"></a>W25N01GV_ReadPageAddr_Data</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, flash.o(i.W25N01GV_ReadPageAddr_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = W25N01GV_ReadPageAddr_Data &rArr; W25N01GV_Write_SR &rArr; W25N01GV_Write_Enable &rArr; SPI_Master_FIFO_Data_Put &rArr; SPI_Master_FIFO_Data_Get &rArr; Rx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_ReadSR
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Write_SR
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Wait_Busy
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Inactive
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Active
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_FIFO_Data_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Read_NoCheck
</UL>

<P><STRONG><a name="[10a]"></a>W25N01GV_ReadSR</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, flash.o(i.W25N01GV_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = W25N01GV_ReadSR &rArr; SPI_Master_FIFO_Data_Put &rArr; SPI_Master_FIFO_Data_Get &rArr; Rx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Inactive
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Active
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_FIFO_Data_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Bad_Block_Replace
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_BBM
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Wait_Busy
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_ReadPageAddr_Data
</UL>

<P><STRONG><a name="[10b]"></a>W25N01GV_Read_BBM_LUT</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, flash.o(i.W25N01GV_Read_BBM_LUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = W25N01GV_Read_BBM_LUT &rArr; SPI_Master_FIFO_Data_Put &rArr; SPI_Master_FIFO_Data_Get &rArr; Rx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Inactive
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Active
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_FIFO_Data_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_BBM
</UL>

<P><STRONG><a name="[66]"></a>W25N01GV_Read_NoCheck</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, flash.o(i.W25N01GV_Read_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = W25N01GV_Read_NoCheck &rArr; W25N01GV_ReadPageAddr_Data &rArr; W25N01GV_Write_SR &rArr; W25N01GV_Write_Enable &rArr; SPI_Master_FIFO_Data_Put &rArr; SPI_Master_FIFO_Data_Get &rArr; Rx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_ReadPageAddr_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_BadBlock
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
</UL>

<P><STRONG><a name="[10e]"></a>W25N01GV_Wait_Busy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, flash.o(i.W25N01GV_Wait_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = W25N01GV_Wait_Busy &rArr; W25N01GV_ReadSR &rArr; SPI_Master_FIFO_Data_Put &rArr; SPI_Master_FIFO_Data_Get &rArr; Rx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Erase_Block
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Bad_Block_Replace
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_WritePageAddr_Data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_ReadPageAddr_Data
</UL>

<P><STRONG><a name="[113]"></a>W25N01GV_WritePageAddr_Data</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, flash.o(i.W25N01GV_WritePageAddr_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = W25N01GV_WritePageAddr_Data &rArr; W25N01GV_Write_SR &rArr; W25N01GV_Write_Enable &rArr; SPI_Master_FIFO_Data_Put &rArr; SPI_Master_FIFO_Data_Get &rArr; Rx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Write_SR
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Write_Enable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Wait_Busy
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Inactive
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Active
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_FIFO_Data_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Write_NoCheck
</UL>

<P><STRONG><a name="[114]"></a>W25N01GV_Write_Disable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flash.o(i.W25N01GV_Write_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = W25N01GV_Write_Disable &rArr; SPI_Master_FIFO_Data_Put &rArr; SPI_Master_FIFO_Data_Get &rArr; Rx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Inactive
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Active
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_FIFO_Data_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Write_SR
</UL>

<P><STRONG><a name="[10d]"></a>W25N01GV_Write_Enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flash.o(i.W25N01GV_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = W25N01GV_Write_Enable &rArr; SPI_Master_FIFO_Data_Put &rArr; SPI_Master_FIFO_Data_Get &rArr; Rx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Inactive
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Active
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_FIFO_Data_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Erase_Block
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Bad_Block_Replace
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Write_SR
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_WritePageAddr_Data
</UL>

<P><STRONG><a name="[65]"></a>W25N01GV_Write_NoCheck</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, flash.o(i.W25N01GV_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = W25N01GV_Write_NoCheck &rArr; W25N01GV_WritePageAddr_Data &rArr; W25N01GV_Write_SR &rArr; W25N01GV_Write_Enable &rArr; SPI_Master_FIFO_Data_Put &rArr; SPI_Master_FIFO_Data_Get &rArr; Rx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_WritePageAddr_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_BadBlock
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
</UL>

<P><STRONG><a name="[111]"></a>W25N01GV_Write_SR</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, flash.o(i.W25N01GV_Write_SR))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = W25N01GV_Write_SR &rArr; W25N01GV_Write_Enable &rArr; SPI_Master_FIFO_Data_Put &rArr; SPI_Master_FIFO_Data_Get &rArr; Rx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Write_Enable
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Write_Disable
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Inactive
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Active
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_FIFO_Data_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Erase_Block
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_WritePageAddr_Data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_ReadPageAddr_Data
</UL>

<P><STRONG><a name="[80]"></a>W25QXX_BlockErase64KB</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, flash.o(i.W25QXX_BlockErase64KB))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = W25QXX_BlockErase64KB &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_Master_FIFO_Data_Put &rArr; SPI_Master_FIFO_Data_Get &rArr; Rx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Inactive
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Active
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_FIFO_Data_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
</UL>

<P><STRONG><a name="[88]"></a>W25QXX_Enter_4Byte_AddressMode</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flash.o(i.W25QXX_Enter_4Byte_AddressMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = W25QXX_Enter_4Byte_AddressMode &rArr; SPI_Master_FIFO_Data_Put &rArr; SPI_Master_FIFO_Data_Get &rArr; Rx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Inactive
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Active
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_FIFO_Data_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_find
</UL>

<P><STRONG><a name="[82]"></a>W25QXX_Read</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, flash.o(i.W25QXX_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = W25QXX_Read &rArr; SPI_Master_FIFO_Data_Put &rArr; SPI_Master_FIFO_Data_Get &rArr; Rx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Inactive
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Active
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_FIFO_Data_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
</UL>

<P><STRONG><a name="[85]"></a>W25QXX_ReadID</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, flash.o(i.W25QXX_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = W25QXX_ReadID &rArr; SPI_Master_FIFO_Data_Put &rArr; SPI_Master_FIFO_Data_Get &rArr; Rx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Inactive
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Active
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_FIFO_Data_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_find
</UL>

<P><STRONG><a name="[117]"></a>W25QXX_ReadSR</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, flash.o(i.W25QXX_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = W25QXX_ReadSR &rArr; SPI_Master_FIFO_Data_Put &rArr; SPI_Master_FIFO_Data_Get &rArr; Rx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Inactive
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Active
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_FIFO_Data_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>

<P><STRONG><a name="[116]"></a>W25QXX_Wait_Busy</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, flash.o(i.W25QXX_Wait_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_Master_FIFO_Data_Put &rArr; SPI_Master_FIFO_Data_Get &rArr; Rx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_BlockErase64KB
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
</UL>

<P><STRONG><a name="[115]"></a>W25QXX_Write_Enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flash.o(i.W25QXX_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = W25QXX_Write_Enable &rArr; SPI_Master_FIFO_Data_Put &rArr; SPI_Master_FIFO_Data_Get &rArr; Rx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Inactive
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Active
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_FIFO_Data_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_BlockErase64KB
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
</UL>

<P><STRONG><a name="[81]"></a>W25QXX_Write_NoCheck</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, flash.o(i.W25QXX_Write_NoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = W25QXX_Write_NoCheck &rArr; W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_Master_FIFO_Data_Put &rArr; SPI_Master_FIFO_Data_Get &rArr; Rx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
</UL>

<P><STRONG><a name="[118]"></a>W25QXX_Write_Page</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, flash.o(i.W25QXX_Write_Page))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = W25QXX_Write_Page &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_Master_FIFO_Data_Put &rArr; SPI_Master_FIFO_Data_Get &rArr; Rx_FIFO_Empty_Flag &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Inactive
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nSS_Active
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Master_FIFO_Data_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_NoCheck
</UL>

<P><STRONG><a name="[119]"></a>__0printf$5</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[157]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[4b]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_BBM
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>

<P><STRONG><a name="[11b]"></a>__0sprintf$5</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf5.o(i.__0sprintf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[158]"></a>__1sprintf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0sprintf$5), UNUSED)

<P><STRONG><a name="[145]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0sprintf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[159]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[15a]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[15b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[12f]"></a>clust2sect</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[f1]"></a>convert_from_bytes_to_power_of_two</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdio_sdcard.o(i.convert_from_bytes_to_power_of_two))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[127]"></a>delay_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>delay_ms</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Check_Temp
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SDRAM_initail
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PLL_Initial
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_HW_Reset
</UL>

<P><STRONG><a name="[b7]"></a>delay_us</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PLL_Initial
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;S8080_StatusRead
</UL>

<P><STRONG><a name="[133]"></a>disk_initialize</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = disk_initialize &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[134]"></a>disk_ioctl</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = disk_ioctl &rArr; __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[135]"></a>disk_read</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = disk_read &rArr; SD_ReadDisk &rArr; SD_ReadMultiBlocks &rArr; SD_DMA_Config &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[142]"></a>disk_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[136]"></a>disk_write</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[56]"></a>f_close</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Updata
</UL>

<P><STRONG><a name="[53]"></a>f_lseek</STRONG> (Thumb, 534 bytes, Stack size 48 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Updata
</UL>

<P><STRONG><a name="[4e]"></a>f_mount</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Updata
</UL>

<P><STRONG><a name="[4f]"></a>f_open</STRONG> (Thumb, 330 bytes, Stack size 632 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Updata
</UL>

<P><STRONG><a name="[51]"></a>f_read</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Updata
</UL>

<P><STRONG><a name="[137]"></a>f_sync</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[124]"></a>ff_convert</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ccsbcs.o(i.ff_convert))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[11f]"></a>ff_wtoupper</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ccsbcs.o(i.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[37]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[121]"></a>get_fat</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[13d]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, diskio.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 794 bytes, Stack size 40 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2352<LI>Call Chain = main &rArr; Flash_Updata &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parallel_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Window_Start_XY
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Width
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Image_Start_Address
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Select_Internal_Font_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_SPI_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Print_Internal_Font_String
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_PWM1_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LT768_DrawSquare_Fill
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ON
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_image_width
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Canvas_Image_Start_address
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_XY
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Active_Window_WH
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Updata
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Make_CRC32_Table
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_find
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[10f]"></a>nSS_Active</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.nSS_Active))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nSS_Active &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_BlockErase64KB
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Read_BBM_LUT
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_ReadSR
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Erase_Block
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Bad_Block_Replace
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Enter_4Byte_AddressMode
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_ReadID
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Write_SR
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Write_Enable
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Write_Disable
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_WritePageAddr_Data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_ReadPageAddr_Data
</UL>

<P><STRONG><a name="[110]"></a>nSS_Inactive</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lt768.o(i.nSS_Inactive))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nSS_Inactive &rArr; LCD_DataRead &rArr; S8080_DataRead
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataWrite
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DataRead
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_CmdWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_BlockErase64KB
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Read_BBM_LUT
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_ReadSR
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Erase_Block
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Bad_Block_Replace
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Enter_4Byte_AddressMode
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_ReadID
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Page
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Write_SR
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Write_Enable
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_Write_Disable
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_WritePageAddr_Data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25N01GV_ReadPageAddr_Data
</UL>

<P><STRONG><a name="[54]"></a>num_to_char</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, download.o(i.num_to_char))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Updata
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APP_Updata
</UL>

<P><STRONG><a name="[122]"></a>put_fat</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[143]"></a>uart_init</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, usart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[107]"></a>SetSysClockTo72</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[11c]"></a>check_fs</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[125]"></a>chk_chr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[139]"></a>clmt_clust</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ff.o(i.clmt_clust))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[11e]"></a>cmp_lfn</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, ff.o(i.cmp_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cmp_lfn &rArr; ff_wtoupper
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[120]"></a>create_chain</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[123]"></a>create_name</STRONG> (Thumb, 492 bytes, Stack size 40 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = create_name
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[129]"></a>dir_alloc</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ff.o(i.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[12c]"></a>dir_find</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[12b]"></a>dir_next</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[130]"></a>dir_register</STRONG> (Thumb, 362 bytes, Stack size 56 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[12a]"></a>dir_sdi</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
</UL>

<P><STRONG><a name="[13b]"></a>find_volume</STRONG> (Thumb, 554 bytes, Stack size 48 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[13c]"></a>follow_path</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[132]"></a>gen_numname</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gen_numname
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[13a]"></a>get_ldnumber</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[13e]"></a>ld_clust</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.ld_clust))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[131]"></a>mem_cpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[126]"></a>mem_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[11d]"></a>move_window</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[140]"></a>remove_chain</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[13f]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[12d]"></a>sum_sfn</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.sum_sfn))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[141]"></a>sync_fs</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[12e]"></a>sync_window</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sync_window &rArr; disk_write &rArr; SD_WriteDisk &rArr; SD_WriteMultiBlocks &rArr; SD_Init &rArr; SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[138]"></a>validate</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[11a]"></a>_printf_core</STRONG> (Thumb, 658 bytes, Stack size 104 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$5
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>

<P><STRONG><a name="[38]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf5.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0sprintf$5)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
